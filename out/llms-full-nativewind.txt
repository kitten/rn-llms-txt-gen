# Overview

### What is Nativewind?

Nativewind enables the use of Tailwind CSS for styling components in React Native. It allows styled components to be shared across all React Native platforms, utilizing the optimal style engine for each: `CSS StyleSheet` on web and `StyleSheet.create` for native environments. The primary objectives are to ensure a consistent styling experience across platforms, enhance Developer UX, improve component performance, and maintain code quality.

On native platforms, Nativewind serves two main purposes. Firstly, during build time, it compiles Tailwind CSS styles into `StyleSheet.create` objects and determines the conditional logic for styles (e.g., hover, focus, active). Secondly, it features an efficient runtime system that applies these styles to components. This allows developers to leverage all of Tailwind CSS's capabilities, including media queries, container queries, and custom values, while maintaining native style performance.

For web platforms, Nativewind acts as a small polyfill to add `className` support to React Native Web.

### Key Features

- **Universal**: Utilizes the best style system for each platform.
- **DevUX**: Offers plugins for easy setup and enhanced intellisense support.
- **Media & Container Queries**: Supports modern mobile styling features like media and container queries.
- **Custom Values (CSS Variables)**: Enables theme creation, sub-themes, and dynamic styles using custom values.
- **Pseudo Classes**: Supports hover/focus/active on compatible components.
- **Parent State Styles**: Automatically styles children based on parent pseudo classes.
- **Additional Features**:
  - Dark mode
  - Arbitrary classes
  - Platform selectors
  - Plugins

### How is this different from StyleSheet.create?

A comprehensive style system should include:

- Static styles
- UI state styles (active, hover, focus, etc.)
- Responsive styles (media queries, dynamic units)
- Container queries (styling based on parent appearance)
- Device state styles (orientation, color scheme)
- Optimal rendering engine usage

React Native's StyleSheet system only provides static styles, leaving other features for users to implement. Nativewind allows developers to focus on building their systems rather than creating custom style solutions.

On the web, it avoids runtime StyleSheet injection by reusing existing Tailwind CSS stylesheets, facilitating Server Side Rendering and improved initial page load performance.

### In Action

Nativewind manages both Tailwind CSS compilation and runtime styles through a JSX transform, eliminating the need for custom wrappers or boilerplate. It integrates seamlessly with all React components transformed via JSX, including third-party modules.

```typescript
import { CustomText } from "third-party-text-component";

export function BoldText(props) {
  // Simply use `className="<your styles>"`
  return <CustomText className="text-bold" {...props} />;
}
```

Styling can be dynamic, allowing for conditional logic and complex style objects.

```typescript
import { Text } from "react-native";

export function MyText({ bold, italic, lineThrough, ...props }) {
  const classNames = [];

  if (bold) classNames.push("font-bold");
  if (italic) classNames.push("italic");
  if (lineThrough) classNames.push("line-through");

  return <Text className={classNames.join(" ")} {...props} />;
}
```

By default, Nativewind maps `className` to `style`, but it can also handle complex component mappings.

```typescript
remapProps(FlatList, {
  className: "style",
  ListFooterComponentClassName: "ListFooterComponentStyle",
  ListHeaderComponentClassName: "ListHeaderComponentStyle",
  columnWrapperClassName: "columnWrapperStyle",
  contentContainerClassName: "contentContainerStyle",
});

<FlatList
  {...}
  className="bg-black"
  ListHeaderComponentClassName="bg-black text-white"
  ListFooterComponentClassName="bg-black text-white"
  columnWrapperClassName="bg-black"
  contentContainerClassName="bg-black"
  indicatorClassName="bg-black"
/>
```

It can also work with components expecting style attributes as props.

```typescript
import { Text } from "react-native";
import { cssInterop } from "nativewind";
import { Svg, Circle } from "react-native-svg";

/**
 * Svg uses `height`/`width` props on native and className on web
 */
const StyledSVG = cssInterop(Svg, {
  className: {
    target: "style",
    nativeStyleToProp: {
      height: true,
      width: true,
    },
  },
});

/**
 * Circle uses `fill`/`stroke`/`strokeWidth` props on native and className on web
 */
const StyledCircle = cssInterop(Circle, {
  className: {
    target: "style",
    nativeStyleToProp: {
      fill: true,
      stroke: true,
      strokeWidth: true,
    },
  },
});

export function BoldText(props) {
  return (
    <Svg className="w-1/2 h-1/2" viewBox="0 0 100 100">
      <StyledCircle
        className="fill-green-500 stroke-blue-500 stroke-2"
        cx="50"
        cy="50"
        r="45"
      />
    </Svg>
  );
}
```

## Installation Guide for Nativewind

Nativewind is compatible with both Expo and framework-less React Native projects, offering a more streamlined experience when used with Expo.

### Web Setup

For Metro bundling on websites or App Clips without using Expo, you'll need either Expo's Metro config `@expo/metro-config` or to manually generate a CSS file using Tailwind CLI.

#### Supported Environments

- **Expo**
- **Framework-less React Native**
- **Next.js**

To quickly set up Nativewind with Expo, use the following command:

```bash
npx rn-new@latest --nativewind
```

### Installation Steps for Expo

#### 1. Install Required Packages

Install `nativewind` along with its peer dependencies: `tailwindcss`, `react-native-reanimated`, and `react-native-safe-area-context`.

Using npm:

```bash
npm install nativewind react-native-reanimated@~3.17.4 react-native-safe-area-context@5.4.0
npm install -D tailwindcss@^3.4.17 prettier-plugin-tailwindcss@^0.5.11
```

#### 2. Configure Tailwind CSS

Initialize a `tailwind.config.js` file by running:

```bash
npx tailwindcss init
```

Update the configuration to include paths to your component files:

```javascript
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./App.tsx", "./components/**/*.{js,jsx,ts,tsx}"],
  presets: [require("nativewind/preset")],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

Create a CSS file and add Tailwind directives:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

#### 3. Configure Babel

Modify your `babel.config.js` to include the Nativewind preset:

```javascript
module.exports = function (api) {
  api.cache(true)
  return {
    presets: [
      ["babel-preset-expo", { jsxImportSource: "nativewind" }],
      "nativewind/babel",
    ],
  }
}
```

#### 4. Set Up Metro Configuration

Create or modify `metro.config.js` with the following configuration:

```javascript
const { getDefaultConfig } = require("expo/metro-config")
const { withNativeWind } = require("nativewind/metro")

const config = getDefaultConfig(__dirname)

module.exports = withNativeWind(config, { input: "./global.css" })
```

#### 5. Import CSS File

In your `App.js`, import the CSS file:

```javascript
import "./global.css"

export default function App() {
  /* Your App */
}
```

#### 6. Update app.json

Configure the bundler to use Metro in `app.json`:

```json
{
  "expo": {
    "web": {
      "bundler": "metro"
    }
  }
}
```

#### 7. TypeScript Setup (Optional)

For TypeScript users, follow the specific guide provided.

### Additional Resources

- **Monorepos**: Instructions for setting up Nativewind in monorepo environments like NX.
- **Other Bundlers**: Guidance on using Nativewind with different bundlers.

## Goals & Non-Goals

Nativewind was developed by a compact team with specific objectives and limitations in mind. These goals closely mirror those of Tailwind CSS, incorporating the best practices for crafting universal applications.

### Goals

#### Utility Framework Focus

Tailwind is not intended as an all-encompassing styling solution; it's not suitable for every styling need and doesn't address every scenario. It aims to offer a stable API that caters to most use cases.

#### Universal Platform Support

Our aim is to foster universal applications, treating all platforms equally. The library should generate styles in the format best suited for each platform (e.g., `StyleSheet.create` on native platforms, CSS StyleSheet on web).

Components and styles must be transferable across platforms while maintaining their intended functionality.

#### Alignment with Tailwind CSS

The design choices and implementation specifics of Tailwind CSS are adopted by this library. Occasionally, this may conflict with typical React Native practices but facilitates better integration with external tools and a universal experience.

Examples include:

- Utilization of the `className` property
- Use of `className` as a single string without support for arrays

### Non-Goals

#### Full Compatibility with All Libraries

A frequent inquiry is: How does this integrate with animation libraries? (e.g., Reanimated 2, Moti)

Response: This is not an objective of the project; any compatibility is coincidental.

Tailwind CSS offers minimal animation support and no compatibility with libraries that don't accept CSS classes.

In a traditional web application using Tailwind CSS + Framer Motion, these systems operate independently without overlap.

When employing Nativewind, it's advisable to adopt this philosophy and adapt to the available tools (whether this library, `StyleSheet.create`, inline styles, etc.).

#### Web Polyfill

This library includes some basic shims for web functionality but does not aim for complete compatibility.

These shims are selected based on: ease of implementation, maintenance burden, community benefit, and minimal runtime impact.

Features like property `gap` or `grid` support are better implemented upstream within React Native.

If you wish to see a specific shim added, please open an issue for consideration.

## Troubleshooting Guide for Nativewind and Tailwind CSS in React Native

### Starting Your Application Without Cache

When troubleshooting, it's essential to start your application without using cached data:

- **Expo**: Use the command `npx expo start --clear`.
- **React Native CLI**: Use the command `npx react-native start --reset-cache`.

### Ensuring Tailwind CSS Functionality

Before addressing issues with Nativewind, confirm that Tailwind CSS is working correctly. Nativewind relies on the Tailwind CLI to compile styles. If you encounter problems, first resolve any issues with the Tailwind CLI using:

```bash
npx tailwindcss --input <input.css> --output output.css
```

Check if the problematic class appears in the `output.css` file.

### Verifying Nativewind Installation

Nativewind offers a utility function called `verifyInstallation()` to confirm proper installation. Import and run this function within a React component, not globally:

```typescript
import React from 'react';
import { verifyInstallation } from 'nativewind';

function App() {
    // Call inside the component scope
    verifyInstallation();

    return (
      // Your component JSX here...
    );
}

export default App;
```

### Enabling Debug Mode

Nativewind supports a `DEBUG` environment variable to output debug information during server runtime. Set this variable in your start command:

```bash
DEBUG=nativewind <start-command>
```

Note: If using @react-native-community/cli, ensure all terminal sessions have the `DEBUG=nativewind` set.

To capture terminal output for reporting issues on GitHub, redirect it to a file:

```bash
DEBUG=nativewind script output.log <start-command>
```

### Common Issues

#### Cache Loading Old Data

Always reset your cache before troubleshooting any issue.

#### Colors Not Working

React Native styling is more restrictive than web styling. For example, the following code works on the web but not in React Native:

```typescript
export function App() {
  return (
    <View className="text-red-500">
      <Text>Hello, World!</Text>
    </View>
  );
}
```

The issue arises because `<View />` does not accept a `color` style. Move the color classes to the `<Text />` element instead.

#### Modifiers Not Working

Ensure that the component supports both the style and necessary props (e.g., `hover:text-white`). Check if the component accepts `color` styles and has an `onHover` prop.

#### Explicit Styles

React Native can have issues with conditionally applied styles. Declare all styles explicitly to avoid these problems. For instance, provide text colors for both light and dark modes instead of applying them conditionally.

#### dp vs px

React Native uses density-independent pixels (dp) as its default unit, while the web uses pixels (px). Nativewind treats these units equivalently but requires a unit for most numeric values, often resulting in `px` being used.

#### Flex

React Native's base flex definition differs from the web. Use `flex-1` to align platform-specific behavior.

#### Flex Direction

React Native has a different default `flex-direction` than the web. Explicitly set the `flex-direction` to resolve discrepancies.

## Quirks

Nativewind integrates CSS and React Native into a unified language framework. Despite this integration, there are notable differences between the two style engines, which we refer to as quirks.

### Explicit Styles

React Native can encounter issues when styles are applied conditionally. To mitigate these problems, it is advisable to declare all styles explicitly.

For instance, rather than applying text color solely for dark mode, specify both light and dark mode text colors. This approach is crucial for ensuring smooth transitions and animations.

### dp vs px

The default unit in React Native is density-independent pixels (dp), whereas the web uses pixels (px). Although these units differ, Nativewind treats them as equivalent. Moreover, Nativewind's compiler mandates a unit for most numeric values, which often results in styles using the `px` unit. While this generally functions well, you might need to employ platform-specific modifiers (`web:`, `native:`, `ios:`, `android:`) to make necessary adjustments per platform.

### Flex

Flexbox operates similarly in React Native as it does on the web, with a few exceptions. The default settings differ; for example, `flexDirection` defaults to `column` instead of `row`, `alignContent` defaults to `flex-start` rather than `stretch`, and `flexShrink` defaults to `0` instead of `1`. Additionally, the `flex` property only supports a single number.

We recommend explicitly setting the flex direction and using the className `flex-1` for consistent styling.

### Yoga 2 vs 3

In previous versions of React Native, margin, padding, or border properties applied to a row-reverse container would flip left/right (and start/end) edges. With the introduction of Yoga 3 in React Native 0.74, these property behaviors now align with those on the web.

## withNativeWind

`withNativeWind` is a higher-order component designed to update your Metro configuration for NativeWind support.

The essential option required is `input`, which specifies the relative path to your `.css` file.

```typescript
import { withNativeWind } from "native-wind/metro"

module.exports = withNativeWind(config, {
  input: "<relative path to your .css file>",
})
```

### Options

| Option | Description | Default Value |
| --- | --- | --- |
| `output` | The relative path for the output file. Defaults to `<projectRoot>/node_modules/.cache/nativewind/`. | `<projectRoot>/node_modules/.cache/nativewind/` |
| `projectRoot` | Absolute path to your project root, used only to set `output`. | N/A |
| `inlineRem` | Numeric value for inlining the value of `rem` units on native. Set to `false` to disable this behavior. Defaults to `14`. | `14` |
| `configPath` | Relative path to your `tailwind.config` file. Recommended to use `@config` instead. | `tailwind.config` |
| `hotServerOptions` | Options for the hot server, with a default configuration of `{ port: 8089 }`. | `{ port: 8089 }` |

#### Experimental Options

These options are available under the `experiments` key.

- **`inlineAnimations`**: Utilizes `react-native-reanimated`'s inline shared values instead of hooks, enhancing performance but may cause issues with fast-refresh.

## Align Content

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `content-center`  | ✅ Full Support |
| `content-start`   | ✅ Full Support |
| `content-end`     | ✅ Full Support |
| `content-between` | ✅ Full Support |
| `content-around`  | ✅ Full Support |
| `content-evenly`  | ✅ Full Support |

## Text Decoration Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support         |
| -------------------- | --------------- |
| `decoration-{n}`     | ✅ Full Support |
| `decoration-[n]`     | ✅ Full Support |
| `decoration-inherit` | 🌐 Web only     |
| `decoration-current` | 🌐 Web only     |

## Align Items

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support         |
| ---------------- | --------------- |
| `items-start`    | ✅ Full Support |
| `items-end`      | ✅ Full Support |
| `items-center`   | ✅ Full Support |
| `items-baseline` | ✅ Full Support |
| `items-stretch`  | ✅ Full Support |

## Text Decoration Style

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class               | Support         |
| ------------------- | --------------- |
| `decoration-solid`  | ✅ Full Support |
| `decoration-double` | ✅ Full Support |
| `decoration-dotted` | ✅ Full Support |
| `decoration-dashed` | ✅ Full Support |
| `decoration-wavy`   | 🌐 Web only     |

## Text Decoration Thickness

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                  | Support     |
| ---------------------- | ----------- |
| `decoration-auto`      | 🌐 Web only |
| `decoration-from-font` | 🌐 Web only |
| `decoration-0`         | 🌐 Web only |
| `decoration-1`         | 🌐 Web only |
| `decoration-2`         | 🌐 Web only |
| `decoration-4`         | 🌐 Web only |
| `decoration-8`         | 🌐 Web only |

## `vars()` Function Overview

This page is currently under development.

### Overview

The `vars` function accepts a dictionary of CSS variables and generates a style object suitable for use in React Native components. This allows dynamic styling based on the provided CSS variable values.

#### Example Usage

```typescript
<View style={vars({ '--brand-color': 'red' })}>
  {/* The resulting style will be: { color: 'red' } */}
  <Text className="text-[--brand-color]" />
</View>
```

In this example, `vars` converts the CSS variable `--brand-color` into a React Native style object where the text color is set to red.

## Text Indent

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support     |
| ------------ | ----------- |
| `indent-[n]` | 🌐 Web only |
| `indent-{n}` | 🌐 Web only |

## Align Self

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support         |
| --------------- | --------------- |
| `self-auto`     | ✅ Full Support |
| `self-start`    | ✅ Full Support |
| `self-end`      | ✅ Full Support |
| `self-center`   | ✅ Full Support |
| `self-stretch`  | ✅ Full Support |
| `self-baseline` | ✅ Full Support |

## Text Overflow

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support     |
| --------------- | ----------- |
| `truncate`      | 🌐 Web only |
| `text-ellipsis` | 🌐 Web only |
| `text-clip`     | 🌐 Web only |

## Text Alignment

### How to Use

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility Table

| Class          | Support         |
| -------------- | --------------- |
| `text-left`    | ✅ Full Support |
| `text-center`  | ✅ Full Support |
| `text-right`   | ✅ Full Support |
| `text-justify` | ✅ Full Support |
| `text-start`   | ✅ Full Support |
| `text-end`     | ✅ Full Support |

---

## Accessing and Managing Device Color Scheme

The `useColorScheme()` function provides a way to access and manage the device's current color scheme.

| Property | Description |
| --- | --- |
| `colorScheme` | Represents the current color scheme of the device. |
| `setColorScheme` | Allows overriding the current color scheme with either `light`, `dark`, or `system`. |
| `toggleColorScheme` | Switches the color scheme between `light` and `dark`. |

Additionally, you can manually adjust the color scheme using `NativeWindStyleSheet.setColorScheme(colorScheme)`.

```typescript
import { useColorScheme } from "nativewind";
import { Text } from "react-native";

function MyComponent() {
  const { colorScheme, setColorScheme } = useColorScheme();

  return (
    <Text
      onPress={() => setColorScheme(colorScheme === "light" ? "dark" : "light")}
    >
      {`The current color scheme is ${colorScheme}`}
    </Text>
  );
}
```

## Flex

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `flex-1`       | ✅ Full Support |
| `basis-[n]`    | ✅ Full Support |
| `flex-auto`    | 🌐 Web only     |
| `flex-initial` | 🌐 Web only     |
| `flex-none`    | 🌐 Web only     |

## Text Underline Offset

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                   | Support     |
| ----------------------- | ----------- |
| `underline-offset-auto` | 🌐 Web only |
| `underline-offset-0`    | 🌐 Web only |
| `underline-offset-1`    | 🌐 Web only |
| `underline-offset-2`    | 🌐 Web only |
| `underline-offset-4`    | 🌐 Web only |
| `underline-offset-8`    | 🌐 Web only |

## Vertical Align

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class               | Support     |
| ------------------- | ----------- |
| `align-baseline`    | 🌐 Web only |
| `align-top`         | 🌐 Web only |
| `align-middle`      | 🌐 Web only |
| `align-bottom`      | 🌐 Web only |
| `align-text-top`    | 🌐 Web only |
| `align-text-bottom` | 🌐 Web only |
| `align-sub`         | 🌐 Web only |
| `align-super`       | 🌐 Web only |

## Flex Basis

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `basis-{n}`  | ✅ Full Support |
| `basis-[n]`  | ✅ Full Support |
| `basis-auto` | 🌐 Web only     |

## Whitespace

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                     | Support     |
| ------------------------- | ----------- |
| `whitespace-normal`       | 🌐 Web only |
| `whitespace-nowrap`       | 🌐 Web only |
| `whitespace-pre`          | 🌐 Web only |
| `whitespace-pre-line`     | 🌐 Web only |
| `whitespace-pre-wrap`     | 🌐 Web only |
| `whitespace-break-spaces` | 🌐 Web only |

## Flex Direction

### Usage

For detailed information, please consult the Tailwind CSS documentation.

:::tip React Native uses a different default flex direction compared to web. It is advisable to explicitly set the Flex Direction on your components. :::

### Compatibility

| Class              | Support         |
| ------------------ | --------------- |
| `flex-row`         | ✅ Full Support |
| `flex-row-reverse` | ✅ Full Support |
| `flex-col`         | ✅ Full Support |
| `flex-col-reverse` | ✅ Full Support |

```typescript
// Example TypeScript typings for flex direction classes

type FlexDirectionClass =
  | "flex-row"
  | "flex-row-reverse"
  | "flex-col"
  | "flex-col-reverse"
```

This section provides guidance on using flex direction in your projects, emphasizing the importance of setting it explicitly in React Native due to its different default behavior compared to web environments. The compatibility table confirms full support for all specified classes.

## Word Break

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support     |
| -------------------- | ----------- |
| `break-normal`       | 🌐 Web only |
| `word-break: normal` | 🌐 Web only |
| `break-words`        | 🌐 Web only |
| `break-all`          | 🌐 Web only |
| `break-keep`         | 🌐 Web only |

## Background Attachment

The following table outlines the support for various background attachment classes in web development:

| Class       | Support  |
| ----------- | -------- |
| `bg-fixed`  | Web only |
| `bg-local`  | Web only |
| `bg-scroll` | Web only |

These classes are used to control how a background image is positioned relative to the viewport or its containing element.

## Background Clip

The following table outlines various CSS classes related to background clipping, along with their support status:

| Class             | Support     |
| ----------------- | ----------- |
| `bg-clip-border`  | 🌐 Web only |
| `bg-clip-padding` | 🌐 Web only |
| `bg-clip-content` | 🌐 Web only |
| `bg-clip-text`    | 🌐 Web only |

These classes are used to define how the background of an element is clipped, with support limited to web browsers.

## Responsive Design in Nativewind

**Note:**\
The default theme of Nativewind is not specifically tailored for native devices. It currently employs breakpoints that are primarily intended for web applications.

Nativewind's approach to responsive design mirrors that of Tailwind CSS. For detailed information, please consult the official Tailwind CSS documentation.

## remapProps Utility in Nativewind

Nativewind offers a utility called `remapProps` to streamline the integration of third-party components that have multiple "style" props. This tool allows developers to map Tailwind CSS class names to these style props, enhancing ease of use and consistency.

### Example Usage

Here's how you can utilize `remapProps`:

```typescript
import { remapProps } from "nativewind";

/**
 * ThirdPartyButton is a component with two "style" props: buttonStyle & labelStyle.
 * Using remapProps, we create new props that accept Tailwind CSS class names.
 */
const CustomizedButton = remapProps(ThirdPartyButton, {
  buttonClass: "buttonStyle",
  labelClass: "labelStyle",
});

<CustomizedButton buttonClass="bg-blue-500" labelClass="text-white" />;
```

### Options for `remapProps`

`remapProps` can be configured with the following options:

```typescript
// Map a new prop to an existing prop.
remapProps(component, { "new-prop": "existing-prop" })

// Override an existing prop by setting it to true.
remapProps(component, { prop: true })
```

This utility simplifies working with components that require multiple style configurations, allowing for more intuitive and maintainable code.

## Flex Grow

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class    | Support         |
| -------- | --------------- |
| `grow`   | ✅ Full Support |
| `grow-0` | ✅ Full Support |

## Background Color

| Class        | Support         |
| ------------ | --------------- |
| `bg-{n}`     | ✅ Full Support |
| `bg-[n]`     | ✅ Full Support |
| `bg-inherit` | 🌐 Web only     |
| `bg-current` | 🌐 Web only     |

### Background Opacity

For performance reasons, Nativewind renders with the `corePlugin` `backgroundOpacity` disabled. This plugin allows text to dynamically change its opacity via the `--tw-background-opacity` variable. Instead, the opacity is set as a static value in the `color` property.

If you need to use this feature, you can enable it by adding the following configuration to your `tailwind.config.js` file:

```typescript
module.exports = {
  /* ... */
  corePlugins: {
    backgroundOpacity: true,
  },
}
```

## Background Image

The following table outlines various classes used for background images, along with their support status:

| Class               | Support     |
| ------------------- | ----------- |
| `bg-none`           | 🌐 Web only |
| `bg-gradient-to-t`  | 🌐 Web only |
| `bg-gradient-to-tr` | 🌐 Web only |
| `bg-gradient-to-r`  | 🌐 Web only |
| `bg-gradient-to-br` | 🌐 Web only |
| `bg-gradient-to-b`  | 🌐 Web only |
| `bg-gradient-to-bl` | 🌐 Web only |
| `bg-gradient-to-l`  | 🌐 Web only |
| `bg-gradient-to-tl` | 🌐 Web only |

These classes are specifically designed for use in web development to apply background styles.

## Flex Shrink

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class      | Support         |
| ---------- | --------------- |
| `shrink`   | ✅ Full Support |
| `shrink-0` | ✅ Full Support |

## Background Origin

The following table outlines the support for different background origin classes in web development:

| Class               | Support  |
| ------------------- | -------- |
| `bg-origin-border`  | Web only |
| `bg-origin-padding` | Web only |
| `bg-origin-content` | Web only |

These classes are used to specify the positioning area of a background image within an element. Each class targets a different part of the element's box model:

- **`bg-origin-border`**: Positions the background relative to the border box.
- **`bg-origin-padding`**: Positions the background relative to the padding box.
- **`bg-origin-content`**: Positions the background relative to the content box.

These properties are supported exclusively in web environments.

## CSS Interop

The `cssInterop` function is designed to tag components so that when they are rendered, the runtime can resolve className strings into styles. This should be used in specific scenarios:

- When dealing with a custom native component.
- When using a third-party component that requires its style prop to be resolved.
- When using a third-party component that does not pass all its props to its children.

### Usage

```typescript
import { cssInterop } from "nativewind"

// Create a new prop and map it to an existing prop
cssInterop(component, { "new-prop": "existing-prop" })

// Override an existing prop.
cssInterop(component, { "new-prop": true })

// Override an existing prop with detailed configuration.
cssInterop(component, {
  "new-prop": {
    target: "existing-prop", // string or boolean
    nativeStyleToProp: {
      "style-attribute": "existing-prop",
    },
  },
})
```

### Examples

Below is an example of mapping using the core component `<TextInput />`:

```typescript
cssInterop(TextInput, {
  className: {
    target: "style", // map className to style
    nativeStyleToProp: {
      textAlign: true, // extract `textAlign` styles and pass them to the `textAlign` prop
    },
  },
  placeholderClassName: {
    target: false, // Do not pass this as a prop
    nativeStyleToProp: {
      color: "placeholderTextColor", // extract `color` and pass it to the `placeholderTextColor` prop
    },
  },
  selectionClassName: {
    target: false, // Do not pass this as a prop
    nativeStyleToProp: {
      color: "selectionColor", // extract `color` and pass it to the `selectionColor` prop
    },
  },
})
```

## Flex Wrap

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class               | Support         |
| ------------------- | --------------- |
| `flex-wrap`         | ✅ Full Support |
| `flex-wrap-reverse` | ✅ Full Support |
| `flex-nowrap`       | ✅ Full Support |

## Background Position

The following table outlines various CSS classes used for setting background positions, along with their support status:

| Class             | Support     |
| ----------------- | ----------- |
| `bg-bottom`       | 🌐 Web only |
| `bg-center`       | 🌐 Web only |
| `bg-left`         | 🌐 Web only |
| `bg-left-bottom`  | 🌐 Web only |
| `bg-left-top`     | 🌐 Web only |
| `bg-right`        | 🌐 Web only |
| `bg-right-bottom` | 🌐 Web only |
| `bg-right-top`    | 🌐 Web only |
| `bg-top`          | 🌐 Web only |

These classes are used to position background images in various locations within an element.

## Background Repeat

The following table outlines various CSS classes related to background repeat properties, along with their support status:

| Class             | Support     |
| ----------------- | ----------- |
| `bg-repeat`       | 🌐 Web only |
| `bg-no-repeat`    | 🌐 Web only |
| `bg-repeat-x`     | 🌐 Web only |
| `bg-repeat-y`     | 🌐 Web only |
| `bg-repeat-round` | 🌐 Web only |
| `bg-repeat-space` | 🌐 Web only |

These classes are used to control how background images repeat within an element. Each class is supported exclusively on web platforms.

## Background Size

The following table outlines the support for various background size classes:

| Class        | Support     |
| ------------ | ----------- |
| `bg-auto`    | 🌐 Web only |
| `bg-cover`   | 🌐 Web only |
| `bg-contain` | 🌐 Web only |

These classes are used to control the sizing of background images in web development.

## Dark Mode Implementation with Nativewind

Nativewind offers two main strategies for integrating dark mode into your application:

1. **System Preference (Automatic)**
2. **Manual Selection (User Toggle)**

Both methods utilize the `colorScheme` from Nativewind, which provides a consistent API to interact with React Native's appearance settings. The underlying mechanism involves using the `Appearance` API on native platforms and `prefers-color-scheme` for web environments.

- To **retrieve** the current system preference, use the `colorScheme` value obtained from `useColorScheme`.
- To **set** the color scheme manually (e.g., via a user toggle), employ the `colorScheme.set()` function.

Both functionalities are accessible through Nativewind's imports.

### 1. System Preference (Automatic)

By default, Nativewind aligns with the device's system appearance settings (light, dark, or automatic). This approach is generally recommended as it ensures a consistent user experience for those who have configured their devices to a specific mode.

To access the current system preference, utilize the `colorScheme` value from the `useColorScheme` hook:

**Expo Note:** In Expo applications, adherence to the system appearance requires setting `userInterfaceStyle` to `automatic` in your `app.json`. Refer to the Expo color scheme guide for additional information.

**Example (Expo Snack):** A comprehensive example is available in the Expo Docs. This setup will automatically adjust when there are changes in the system's appearance settings.

### 2. Manual Selection (User Toggle)

For applications that allow users to choose between light, dark, or system mode manually, use the `colorScheme.set()` function. This feature is particularly beneficial for apps with a theme toggle option within their user interface.

**Example:** A complete implementation can be found at nativewind/theme-toggle on GitHub.

#### Basic Toggle Example

```typescript
import { useState } from "react";
import { SafeAreaView, Text, Pressable } from "react-native";
import { colorScheme } from "nativewind";
import { StatusBar } from 'expo-status-bar';

import './global.css';

export default function App() {
  const [currentTheme, setCurrentTheme] = useState<"light" | "dark">("light");

  const toggleTheme = () => {
    const newTheme = currentTheme === "light" ? "dark" : "light";
    setCurrentTheme(newTheme);
    colorScheme.set(newTheme);
  };

  return (
    <SafeAreaView
      className={`flex-1 ${currentTheme === 'dark' ? 'bg-gray-900' : 'bg-white'} justify-center items-center`}
    >
      <StatusBar style={currentTheme === 'dark' ? 'light' : 'dark'} />
      <Pressable onPress={toggleTheme} className="mt-4">
        <Text
          className={currentTheme === 'dark' ? 'text-gray-100' : 'text-gray-900'}
          style={{ fontSize: 16, fontWeight: 'bold' }}
        >
          {currentTheme === 'dark' ? 'Dark' : 'Light'}
        </Text>
      </Pressable>
    </SafeAreaView>
  );
}
```

Persisting the user's choice can be achieved using a storage solution like React Native Async Storage.

### Best Practices

- **Utilize `colorScheme` from `useColorScheme`** to determine the current color scheme based on system preference.
- **Employ `colorScheme.set()`** for enabling users to manually select their preferred color scheme.
- For most applications, adhering to system preferences is advisable.
- If a manual toggle is provided, always include an option to revert to "System" mode.

### References

- Expo Color Schemes Guide
- Nativewind useColorScheme API
- Theme Toggle Example (GitHub)

## Aspect Ratio

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support         |
| --------------- | --------------- |
| `aspect-auto`   | ✅ Full Support |
| `aspect-video`  | ✅ Full Support |
| `aspect-square` | ✅ Full Support |
| `aspect-[n]`    | ✅ Full Support |
| `aspect-{n}`    | ✅ Full Support |

## Gap

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION:**\
The `gap` feature requires React Native version 0.71 or higher.

### Compatibility

| Class       | Support         |
| ----------- | --------------- |
| `gap-{n}`   | ✅ Full Support |
| `gap-[n]`   | ✅ Full Support |
| `gap-x-{n}` | ✅ Full Support |
| `gap-x-[n]` | ✅ Full Support |
| `gap-y-{n}` | ✅ Full Support |
| `gap-y-[n]` | ✅ Full Support |

## Gradient Color Stops

| Class              | Support     |
| ------------------ | ----------- |
| `from-inherit`     | 🌐 Web only |
| `from-current`     | 🌐 Web only |
| `from-transparent` | 🌐 Web only |
| `from-black`       | 🌐 Web only |
| `from-white`       | 🌐 Web only |
| `from-{n}`         | 🌐 Web only |
| `from-[n]`         | 🌐 Web only |
| `via-inherit`      | 🌐 Web only |
| `via-current`      | 🌐 Web only |
| `via-transparent`  | 🌐 Web only |
| `via-black`        | 🌐 Web only |
| `via-white`        | 🌐 Web only |
| `via-{n}`          | 🌐 Web only |
| `via-[n]`          | 🌐 Web only |
| `to-inherit`       | 🌐 Web only |
| `to-current`       | 🌐 Web only |
| `to-transparent`   | 🌐 Web only |
| `to-black`         | 🌐 Web only |
| `to-white`         | 🌐 Web only |
| `to-{n}`           | 🌐 Web only |
| `to-[n]`           | 🌐 Web only |

## Border Color

### Usage

For detailed instructions and examples, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support         |
| ---------------- | --------------- |
| `border-{n}`     | ✅ Full Support |
| `border-[n]`     | ✅ Full Support |
| `border-inherit` | 🌐 Web only     |
| `border-current` | 🌐 Web only     |

#### Border Opacity (Native Only)

Nativewind, by default, does not support the `corePlugin` feature for `borderOpacity`. This means that border color opacity cannot dynamically change using the `--tw-border-opacity` variable. Instead, opacity is set as a static value within the `color` property.

To enable dynamic border opacity in Nativewind, modify your `tailwind.config.js` file by adding:

```typescript
module.exports = {
  /* ... */
  corePlugin: {
    borderOpacity: true,
  },
}
```

This configuration allows you to utilize the `borderOpacity` feature.

## Grid Auto Columns

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `auto-cols-auto` | 🌐 Web only |
| `auto-cols-min`  | 🌐 Web only |
| `auto-cols-max`  | 🌐 Web only |
| `auto-cols-fr`   | 🌐 Web only |

## Border Radius

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `rounded-none`    | ✅ Full Support |
| `rounded`         | ✅ Full Support |
| `rounded-{n}`     | ✅ Full Support |
| `rounded-[n]`     | ✅ Full Support |
| `rounded-full`    | ✅ Full Support |
| `rounded-t-none`  | ✅ Full Support |
| `rounded-t-{n}`   | ✅ Full Support |
| `rounded-t-[n]`   | ✅ Full Support |
| `rounded-t-full`  | ✅ Full Support |
| `rounded-r-none`  | ✅ Full Support |
| `rounded-r-{n}`   | ✅ Full Support |
| `rounded-r-[n]`   | ✅ Full Support |
| `rounded-r-full`  | ✅ Full Support |
| `rounded-b-none`  | ✅ Full Support |
| `rounded-b-{n}`   | ✅ Full Support |
| `rounded-b-[n]`   | ✅ Full Support |
| `rounded-b-full`  | ✅ Full Support |
| `rounded-l-none`  | ✅ Full Support |
| `rounded-l-{n}`   | ✅ Full Support |
| `rounded-l-[n]`   | ✅ Full Support |
| `rounded-l-full`  | ✅ Full Support |
| `rounded-tl-none` | ✅ Full Support |
| `rounded-tl-{n}`  | ✅ Full Support |
| `rounded-tl-[n]`  | ✅ Full Support |
| `rounded-tl-full` | ✅ Full Support |
| `rounded-tr-none` | ✅ Full Support |
| `rounded-tr-{n}`  | ✅ Full Support |
| `rounded-tr-[n]`  | ✅ Full Support |
| `rounded-tr-full` | ✅ Full Support |
| `rounded-br-none` | ✅ Full Support |
| `rounded-br-{n}`  | ✅ Full Support |
| `rounded-br-[n]`  | ✅ Full Support |
| `rounded-br-full` | ✅ Full Support |
| `rounded-bl-none` | ✅ Full Support |
| `rounded-bl-{n}`  | ✅ Full Support |
| `rounded-bl-[n]`  | ✅ Full Support |
| `rounded-bl-full` | ✅ Full Support |
| `border-inherit`  | 🌐 Web only     |
| `border-current`  | 🌐 Web only     |

## Box Decoration Break

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                  | Support     |
| ---------------------- | ----------- |
| `box-decoration-clone` | 🌐 Web only |
| `box-decoration-slice` | 🌐 Web only |

## Grid Auto Flow

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                 | Support     |
| --------------------- | ----------- |
| `grid-flow-row`       | 🌐 Web only |
| `grid-flow-col`       | 🌐 Web only |
| `grid-flow-dense`     | 🌐 Web only |
| `grid-flow-row-dense` | 🌐 Web only |
| `grid-flow-col-dense` | 🌐 Web only |

## Border Style

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

When working with native environments, use `border-0` instead of `border-none` to eliminate borders. Below is a table indicating support levels for various border classes:

| Class           | Support         |
| --------------- | --------------- |
| `border-solid`  | ✅ Full Support |
| `border-dashed` | ✅ Full Support |
| `border-dotted` | ✅ Full Support |
| `border-none`   | 🌐 Web only     |
| `border-double` | 🌐 Web only     |
| `border-hidden` | 🌐 Web only     |

## Border Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support status for various border width classes:

| Class          | Support         |
| -------------- | --------------- |
| `border`       | ✅ Full Support |
| `border-{n}`   | ✅ Full Support |
| `border-[n]`   | ✅ Full Support |
| `border-x`     | ✅ Full Support |
| `border-x-{n}` | ✅ Full Support |
| `border-x-[n]` | ✅ Full Support |
| `border-y`     | ✅ Full Support |
| `border-y-{n}` | ✅ Full Support |
| `border-y-[n]` | ✅ Full Support |
| `border-t`     | ✅ Full Support |
| `border-t-{n}` | ✅ Full Support |
| `border-t-[n]` | ✅ Full Support |
| `border-r`     | ✅ Full Support |
| `border-r-{n}` | ✅ Full Support |
| `border-r-[n]` | ✅ Full Support |
| `border-b`     | ✅ Full Support |
| `border-b-{n}` | ✅ Full Support |
| `border-b-[n]` | ✅ Full Support |
| `border-l`     | ✅ Full Support |
| `border-l-{n}` | ✅ Full Support |
| `border-l-[n]` | ✅ Full Support |

## Grid Auto Rows

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `auto-rows-auto` | 🌐 Web only |
| `auto-rows-min`  | 🌐 Web only |
| `auto-rows-max`  | 🌐 Web only |
| `auto-rows-fr`   | 🌐 Web only |

## Divide Color

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

**CAUTION:**\
The `Divide Color` feature was temporarily removed in version 4. Efforts are underway to reintroduce it in future updates.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `divide-{n}`     | 🌐 Web only |
| `divide-[n]`     | 🌐 Web only |
| `divide-inherit` | 🌐 Web only |
| `divide-current` | 🌐 Web only |

#### divideOpacity (native only)

Due to performance considerations, Nativewind renders with the `corePlugin` `divideOpacity` disabled by default. This plugin enables dynamic adjustment of the divide color's opacity using the `--tw-divide-opacity` variable. Instead, opacity is set as a static value in the `color` property.

To enable this feature, add the following configuration to your `tailwind.config.js` file:

```typescript
module.exports = {
  /* ... */
  corePlugin: {
    divideOpacity: true,
  },
}
```

## Divide Style

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

**CAUTION:**\
The `Divide Style` feature was temporarily removed in version 4. Efforts are underway to reintroduce it in a future update.

### Compatibility

| Class           | Support     |
| --------------- | ----------- |
| `divide-solid`  | 🌐 Web only |
| `divide-dashed` | 🌐 Web only |
| `divide-dotted` | 🌐 Web only |
| `divide-none`   | 🌐 Web only |
| `divide-double` | 🌐 Web only |
| `divide-hidden` | 🌐 Web only |

## Typescript

Nativewind enhances React Native's type definitions through declaration merging. To incorporate these types, create a new file named `nativewind-env.d.ts` and include a triple-slash directive to reference the necessary types.

```typescript
/// <reference types="nativewind/types" />
```

**CAUTION**

Avoid naming this file:

- `nativewind.d.ts`
- The same as any existing file or folder in the directory, such as `app.d.ts` if there's an `/app` folder.
- Identically to a folder within `node_modules`, like `react.d.ts`.

Naming conflicts may prevent the TypeScript compiler from recognizing your types.

## Writing Custom Components

This guide focuses on creating your own components. For guidance on using Nativewind with third-party components, refer to the dedicated third-party components guide.

When developing custom components, you typically won't need `cssInterop` or `remapProps`, as these are primarily for third-party component integration.

### Creating Your First Component

Nativewind operates by passing class names to components, similar to how Tailwind CSS uses utility classes. To define a component with default styles, merge the className string:

```typescript
function MyComponent({ className }: { className: string }) {
  const defaultStyles = "text-black dark:text-white";
  return <Text className={`${defaultStyles} ${className}`} />;
}

<MyComponent className="font-bold" />;
```

This pattern can be extended to build more intricate components, such as a `Button` with various variants:

```typescript
const variantStyles: Record<string, string> = {
  default: "rounded",
  primary: "bg-blue-500 text-white",
  secondary: "bg-gray-200 text-black",
};

function MyComponent({ variant = 'default', className = '', ...props }: { variant?: keyof typeof variantStyles; className?: string; [key: string]: any }) {
  return (
    <Text
      className={`
        ${variantStyles.default}
        ${variantStyles[variant]}
        ${className}
      `}
      {...props }
    />
  );
}
```

As you create more variants, the complexity can increase. Consider using a class name management library to streamline this process:

- tailwind-variants
- cva
- tw-classed
- clsx
- classnames

### Merging with Inline Styles

Nativewind seamlessly merges inline styles with class names. For details on style specificity, refer to the relevant documentation.

```typescript
<Text className="text-white" style={{ color: "black" }} /> // The text will be black
```

### Handling Components with Multiple Style Props

Custom components can accommodate multiple style props. For instance, a `Button` component might include both an `outerClassName` and an `innerClassName`.

```typescript
function MyComponent({ className = '', textClassName = '' }: { className?: string; textClassName?: string }) {
  return (
    <View className={className}>
      <Text className={textClassName}>Hello, Nativewind!</Text>
    </View>
  );
}
```

## Functions & Directives

### Overview

Nativewind supports the same functions and directives as Tailwind CSS. For detailed documentation, refer to the official Tailwind CSS resources.

These functions can be utilized within your theme, arbitrary class names, or custom CSS.

Beyond what Tailwind CSS offers, Nativewind also polyfills specific CSS functions:

### `var()`

The `var()` function in CSS allows you to use a custom property's value (also known as a "CSS variable") within another property's value.

**tailwind.config.js**

```typescript
module.exports = {
  theme: {
    extend: {
      color: {
        custom: "var(--my-custom-color)",
      },
    },
  },
}
```

Usage examples:

```jsx
// style: { color: "red" }
<Text className="text-custom [--my-custom-color:red]"></Text>

// style: { color: "green" }
<View style={vars({ "--my-custom-color": "green" })}>
  <Text className="text-custom"></Text>
</View>
```

### `calc()`

**CAUTION:** Support for `calc()` is currently limited and will be enhanced in future updates.

The `calc()` function enables calculations within CSS property values, supporting operations like addition, subtraction, multiplication, and division. It can also work with other functions such as `var()`.

Usage examples:

```css
/* Calculate a value */
.element {
  width: calc(var(--my-variable) - (20px + 2rem));
}

/* Part of a value calculation */
.element {
  background-color: hsl(
    calc(var(--H) + 20),
    calc(var(--S) - 10%),
    calc(var(--L) + 30%)
  );
}
```

#### Limitations

##### Mixing Units

While `calc()` is versatile on the web, React Native's layout engine has limitations and does not support mixing units. Nativewind supports only two modes: `numerical` and `percentage`.

```css
.element {
  /* ❌ Mixing numerical and percentage units */
  width: calc(100% - 20px);
}

.element {
  /* ❌ Mixing numerical and percentage units with custom properties */
  --width: 100%;
  width: calc(var(--width) - 20px);
}

.element {
  /* ✅ Using only numerical units */
  --width: 100rem;
  width: calc(var(--width) - 20px);
}

.element {
  /* ✅ Using only percentage units */
  --width: 100%;
  width: calc(var(--width) - 20%);
}
```

##### Custom Properties

Operations within custom properties are not supported. Use `calc()` with custom properties by defining the property first, then applying calculations.

```css
.element {
  /* ❌ Operators cannot be in a custom property */
  --width: 100% - 20%;
  width: calc(var(--width));
}

.element {
  /* ✅ Operator is part of the `calc()` expression */
  --width: 100%;
  width: calc(var(--width) - 20%);
}
```

Contributions are welcome to enhance `calc()` support in Nativewind, such as adding other modes (e.g., `deg`).

### `env()`

The `env()` function allows access to device-specific environment information.

Nativewind supports:

```css
env(safe-area-inset-top);
env(safe-area-inset-bottom);
env(safe-area-inset-left);
env(safe-area-inset-right);
```

For more details, refer to the Safe Area Insets documentation.

## Grid Column Start / End

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the compatibility of various grid column classes with web platforms:

| Class            | Support     |
| ---------------- | ----------- |
| `col-auto`       | 🌐 Web only |
| `col-span-1`     | 🌐 Web only |
| `col-span-2`     | 🌐 Web only |
| `col-span-3`     | 🌐 Web only |
| `col-span-4`     | 🌐 Web only |
| `col-span-5`     | 🌐 Web only |
| `col-span-6`     | 🌐 Web only |
| `col-span-7`     | 🌐 Web only |
| `col-span-8`     | 🌐 Web only |
| `col-span-9`     | 🌐 Web only |
| `col-span-10`    | 🌐 Web only |
| `col-span-11`    | 🌐 Web only |
| `col-span-12`    | 🌐 Web only |
| `col-span-full`  | 🌐 Web only |
| `col-start-1`    | 🌐 Web only |
| `col-start-2`    | 🌐 Web only |
| `col-start-3`    | 🌐 Web only |
| `col-start-4`    | 🌐 Web only |
| `col-start-5`    | 🌐 Web only |
| `col-start-6`    | 🌐 Web only |
| `col-start-7`    | 🌐 Web only |
| `col-start-8`    | 🌐 Web only |
| `col-start-9`    | 🌐 Web only |
| `col-start-10`   | 🌐 Web only |
| `col-start-11`   | 🌐 Web only |
| `col-start-12`   | 🌐 Web only |
| `col-start-13`   | 🌐 Web only |
| `col-start-auto` | 🌐 Web only |
| `col-end-1`      | 🌐 Web only |
| `col-end-2`      | 🌐 Web only |
| `col-end-3`      | 🌐 Web only |
| `col-end-4`      | 🌐 Web only |
| `col-end-5`      | 🌐 Web only |
| `col-end-6`      | 🌐 Web only |
| `col-end-7`      | 🌐 Web only |
| `col-end-8`      | 🌐 Web only |
| `col-end-9`      | 🌐 Web only |
| `col-end-10`     | 🌐 Web only |
| `col-end-11`     | 🌐 Web only |
| `col-end-12`     | 🌐 Web only |
| `col-end-13`     | 🌐 Web only |
| `col-end-auto`   | 🌐 Web only |

## Divide Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION**

The `Divide Width` feature was temporarily removed in version 4. Efforts are underway to reintroduce it in a future update.

### Compatibility

| Class          | Support     |
| -------------- | ----------- |
| `divide-x-{n}` | 🌐 Web only |
| `divide-x-[n]` | 🌐 Web only |
| `divide-y-{n}` | 🌐 Web only |
| `divide-y-[n]` | 🌐 Web only |

## Outline Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                 | Support     |
| --------------------- | ----------- |
| `outline-inherit`     | 🌐 Web only |
| `outline-current`     | 🌐 Web only |
| `outline-transparent` | 🌐 Web only |
| `outline-black`       | 🌐 Web only |
| `outline-white`       | 🌐 Web only |
| `outline-{n}`         | 🌐 Web only |
| `outline-[n]`         | 🌐 Web only |

## Outline Offset

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class              | Support     |
| ------------------ | ----------- |
| `outline-offset-0` | 🌐 Web only |
| `outline-offset-1` | 🌐 Web only |
| `outline-offset-2` | 🌐 Web only |
| `outline-offset-4` | 🌐 Web only |
| `outline-offset-8` | 🌐 Web only |

## Box Sizing

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `box-border`  | 🌐 Web only |
| `box-content` | 🌐 Web only |

## Grid Row Start / End

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following classes are supported exclusively on web platforms:

| Class            | Support     |
| ---------------- | ----------- |
| `row-auto`       | 🌐 Web only |
| `row-span-1`     | 🌐 Web only |
| `row-span-2`     | 🌐 Web only |
| `row-span-3`     | 🌐 Web only |
| `row-span-4`     | 🌐 Web only |
| `row-span-5`     | 🌐 Web only |
| `row-span-6`     | 🌐 Web only |
| `row-span-7`     | 🌐 Web only |
| `row-span-8`     | 🌐 Web only |
| `row-span-9`     | 🌐 Web only |
| `row-span-10`    | 🌐 Web only |
| `row-span-11`    | 🌐 Web only |
| `row-span-12`    | 🌐 Web only |
| `row-span-full`  | 🌐 Web only |
| `row-start-1`    | 🌐 Web only |
| `row-start-2`    | 🌐 Web only |
| `row-start-3`    | 🌐 Web only |
| `row-start-4`    | 🌐 Web only |
| `row-start-5`    | 🌐 Web only |
| `row-start-6`    | 🌐 Web only |
| `row-start-7`    | 🌐 Web only |
| `row-start-8`    | 🌐 Web only |
| `row-start-9`    | 🌐 Web only |
| `row-start-10`   | 🌐 Web only |
| `row-start-11`   | 🌐 Web only |
| `row-start-12`   | 🌐 Web only |
| `row-start-13`   | 🌐 Web only |
| `row-start-auto` | 🌐 Web only |
| `row-end-1`      | 🌐 Web only |
| `row-end-2`      | 🌐 Web only |
| `row-end-3`      | 🌐 Web only |
| `row-end-4`      | 🌐 Web only |
| `row-end-5`      | 🌐 Web only |
| `row-end-6`      | 🌐 Web only |
| `row-end-7`      | 🌐 Web only |
| `row-end-8`      | 🌐 Web only |
| `row-end-9`      | 🌐 Web only |
| `row-end-10`     | 🌐 Web only |
| `row-end-11`     | 🌐 Web only |
| `row-end-12`     | 🌐 Web only |
| `row-end-13`     | 🌐 Web only |
| `row-end-auto`   | 🌐 Web only |

## Outline Style

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `outline-none`   | 🌐 Web only |
| `outline`        | 🌐 Web only |
| `outline-dashed` | 🌐 Web only |
| `outline-dotted` | 🌐 Web only |
| `outline-double` | 🌐 Web only |

## Grid Template Columns

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `grid-cols-1`    | 🌐 Web only |
| `grid-cols-2`    | 🌐 Web only |
| `grid-cols-3`    | 🌐 Web only |
| `grid-cols-4`    | 🌐 Web only |
| `grid-cols-5`    | 🌐 Web only |
| `grid-cols-6`    | 🌐 Web only |
| `grid-cols-7`    | 🌐 Web only |
| `grid-cols-8`    | 🌐 Web only |
| `grid-cols-9`    | 🌐 Web only |
| `grid-cols-10`   | 🌐 Web only |
| `grid-cols-11`   | 🌐 Web only |
| `grid-cols-12`   | 🌐 Web only |
| `grid-cols-none` | 🌐 Web only |

## Outline Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class       | Support     |
| ----------- | ----------- |
| `outline-0` | 🌐 Web only |
| `outline-1` | 🌐 Web only |
| `outline-2` | 🌐 Web only |
| `outline-4` | 🌐 Web only |
| `outline-8` | 🌐 Web only |

## Ring Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class              | Support     |
| ------------------ | ----------- |
| `ring-inherit`     | 🌐 Web only |
| `ring-current`     | 🌐 Web only |
| `ring-transparent` | 🌐 Web only |
| `ring-black`       | 🌐 Web only |
| `ring-white`       | 🌐 Web only |
| `ring-{n}`         | 🌐 Web only |
| `ring-[n]`         | 🌐 Web only |

## Units

### Polyfilled Units

These units can be utilized within classes or in the `tailwind.config.js` file.

| Unit | Name        | Description                                  |
| ---- | ----------- | -------------------------------------------- |
| vw   | View Width  | Implemented using `Dimensions.get('window')` |
| vh   | View Height | Implemented using `Dimensions.get('window')` |

## Break After

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                    | Support     |
| ------------------------ | ----------- |
| `break-after-auto`       | 🌐 Web only |
| `break-after-avoid`      | 🌐 Web only |
| `break-after-all`        | 🌐 Web only |
| `break-after-avoid-page` | 🌐 Web only |
| `break-after-page`       | 🌐 Web only |
| `break-after-left`       | 🌐 Web only |
| `break-after-right`      | 🌐 Web only |
| `break-after-column`     | 🌐 Web only |

## Ring Offset Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support     |
| --------------- | ----------- |
| `ring-offset-0` | 🌐 Web only |
| `ring-offset-1` | 🌐 Web only |
| `ring-offset-2` | 🌐 Web only |
| `ring-offset-4` | 🌐 Web only |
| `ring-offset-8` | 🌐 Web only |

## Grid Template Rows

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `grid-rows-1`    | 🌐 Web only |
| `grid-rows-2`    | 🌐 Web only |
| `grid-rows-3`    | 🌐 Web only |
| `grid-rows-4`    | 🌐 Web only |
| `grid-rows-5`    | 🌐 Web only |
| `grid-rows-6`    | 🌐 Web only |
| `grid-rows-7`    | 🌐 Web only |
| `grid-rows-8`    | 🌐 Web only |
| `grid-rows-9`    | 🌐 Web only |
| `grid-rows-10`   | 🌐 Web only |
| `grid-rows-11`   | 🌐 Web only |
| `grid-rows-12`   | 🌐 Web only |
| `grid-rows-none` | 🌐 Web only |

## Ring Offset Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support     |
| --------------- | ----------- |
| `ring-offset-0` | 🌐 Web only |
| `ring-offset-1` | 🌐 Web only |
| `ring-offset-2` | 🌐 Web only |
| `ring-offset-4` | 🌐 Web only |
| `ring-offset-8` | 🌐 Web only |

## Ring Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support     |
| ------------ | ----------- |
| `ring-0`     | 🌐 Web only |
| `ring-1`     | 🌐 Web only |
| `ring-2`     | 🌐 Web only |
| `ring`       | 🌐 Web only |
| `ring-4`     | 🌐 Web only |
| `ring-8`     | 🌐 Web only |
| `ring-inset` | 🌐 Web only |

## Break Before

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                     | Support     |
| ------------------------- | ----------- |
| `break-before-auto`       | 🌐 Web only |
| `break-before-avoid`      | 🌐 Web only |
| `break-before-all`        | 🌐 Web only |
| `break-before-avoid-page` | 🌐 Web only |
| `break-before-page`       | 🌐 Web only |
| `break-before-left`       | 🌐 Web only |
| `break-before-right`      | 🌐 Web only |
| `break-before-column`     | 🌐 Web only |

## Justify Content

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `justify-start`   | ✅ Full Support |
| `justify-end`     | ✅ Full Support |
| `justify-center`  | ✅ Full Support |
| `justify-between` | ✅ Full Support |
| `justify-around`  | ✅ Full Support |
| `justify-evenly`  | ✅ Full Support |

## Background Blend Mode

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support status for various background blend mode classes:

| Class                  | Support         |
| ---------------------- | --------------- |
| `bg-blend-normal`      | ✅ Full Support |
| `bg-blend-multiply`    | ✅ Full Support |
| `bg-blend-screen`      | ✅ Full Support |
| `bg-blend-overlay`     | ✅ Full Support |
| `bg-blend-darken`      | ✅ Full Support |
| `bg-blend-lighten`     | ✅ Full Support |
| `bg-blend-color-dodge` | ✅ Full Support |
| `bg-blend-color-burn`  | ✅ Full Support |
| `bg-blend-hard-light`  | ✅ Full Support |
| `bg-blend-soft-light`  | ✅ Full Support |
| `bg-blend-difference`  | ✅ Full Support |
| `bg-blend-exclusion`   | ✅ Full Support |
| `bg-blend-hue`         | ✅ Full Support |
| `bg-blend-saturation`  | ✅ Full Support |
| `bg-blend-color`       | ✅ Full Support |
| `bg-blend-luminosity`  | ✅ Full Support |

## Justify Items

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                   | Support     |
| ----------------------- | ----------- |
| `justify-items-start`   | 🌐 Web only |
| `justify-items-end`     | 🌐 Web only |
| `justify-items-center`  | 🌐 Web only |
| `justify-items-stretch` | 🌐 Web only |

## Box Shadow

Nativewind leverages the scaling system from react-native-shadow-generator to facilitate cross-platform shadow generation.

### Usage

For detailed usage instructions, please consult the Tailwind CSS documentation.

**CAUTION:**\
On native platforms, shadows may not be visible if a background color is absent.

### Example

```typescript
import { Text, View } from 'react-native';
import { styled } from 'nativewind';

const StyledView = styled(View);
const StyledText = styled(Text);

const App = () => {
  return (
    <StyledView className="flex-1 items-center justify-center">
      <StyledView className="h-[50vh] items-center justify-center shadow">
        <StyledText className="text-slate-800 shadow">Try editing me! 🎉</StyledText>
      </StyledView>
    </StyledView>
  );
}
```

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `shadow`       | ✅ Full Support |
| `shadow-{n}`   | ✅ Full Support |
| `shadow-none`  | ✅ Full Support |
| `shadow-[n]`   | 🌐 Web only     |
| `shadow-inner` | 🌐 Web only     |

## Box Shadow Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `shadow-{n}` | ✅ Full Support |
| `shadow-[n]` | ✅ Full Support |

## Working with Third-Party Components in Nativewind

A third-party component is a dependency of your application that isn't part of the core React Native components. Nativewind operates by passing the `className` prop to these core components, but it's not always clear if third-party components support this behavior without examining their source code.

### Example: Prop Handling in Third-Party Components

Consider the following example where a third-party component does not pass down the `className` prop:

```typescript
// ❌ This component will not work with Nativewind
function ThirdPartyComponent({ style }) {
  return <View style={style} />;
}

// ✅ This component will work with Nativewind
function ThirdPartyComponent({ style, ...props }) {
  return <View style={style} {...props} />;
}
```

#### Improving Prop Handling

If a third-party component restricts its props, consider submitting a pull request to modify it so that all props are passed down. This is beneficial not only for Nativewind but also for utilizing new React Native APIs.

```typescript
function ThirdPartyComponent({ style }) {
  return <View style={style} />;
}

// New API usage example: aria-label added in version 0.71
<ThirdPartyComponent aria-label="My Label" />;
```

### Handling Components with Multiple Style Props

Some components accept multiple style-related props, such as React Native's `<FlatList />`, which has both `style` and `contentContainerStyle`. Use the `remapProps` function to map these styles for Nativewind compatibility.

```typescript
function ThirdPartyComponent({ style, contentContainerStyle, ...props }) {
  return (
    <FlatList
      style={style}
      contentContainerStyle={contentContainerStyle}
      {...props}
    />
  );
}

// Initialize remapProps at the app's entry point
remapProps(ThirdPartyComponent, {
  className: "style",
  contentContainerClassName: "contentContainerStyle",
});

<ThirdPartyComponent className="p-5" contentContainerClassName="p-2" />;
```

Nativewind's style objects are more complex than those created with `StyleSheet.create`. To avoid breaking third-party components, `remapProps` passes a special object to the target prop, appearing as an empty object.

### Handling Components with Style Attribute Props

Some components require styles to be passed directly as props. For instance, React Native's `<StatusBar />` component uses a `backgroundColor` prop.

```typescript
function ThirdPartyComponent({ borderColor, style, ...props }) {
  const backgroundColor = style.color === "white" ? "black" : "white";
  return (
    <View
      style={{
        ...style,
        borderColor,
        backgroundColor,
      }}
    />
  );
}
```

To support these components, use the `cssInterop` function. This acts as a marker for Nativewind to convert `className` props into style objects.

**CAUTION:** Enabling `cssInterop` incurs a performance cost due to additional processing required by Nativewind.

### Handling Multiple Props with Similar Properties

When dealing with components that have multiple similar properties, managing each prop individually can be cumbersome. Instead, use the dynamic mapping modifier for efficient management.

```typescript
function ThirdPartyComponent({ labelColor, inputColor, ...props }) {
  return (
    <>
      <Text style={{ color: labelColor }}>Label</Text>
      <TextInput style={{ color: labelColor }} />
    </>
  );
}

// Possible but cumbersome approach
cssInterop(ThirdPartyComponent, {
  labelColorClassName: {
    target: false,
    nativeStyleToProps: { color: 'labelColor' }
  },
  inputColorClassName: {
    target: false,
    nativeStyleToProps: { color: 'inputColor' }
  }
});

function Wrapper() {
  const labelStyle = cva('color-black');
  const inputStyle = cva('color-black');

  return (
    <ThirdPartyComponent
      labelColorClassName={labelStyle}
      inputColorClassName={inputStyle}
    />
  );
}

// Efficient approach using dynamic mapping modifier
cssInterop(ThirdPartyComponent, {
  className: "style",
});

function Wrapper() {
  const style = cva("{}-[inputColor]:color-black {}-[labelColor]:color-black");

  return <ThirdPartyComponent className={style} />;
}
```

### Dynamic Mapping Modifier

The dynamic mapping modifier allows moving props between different properties. It is useful for managing multiple similar props or consolidating styles into a single prop.

#### Usage:

- `{}-[<propName>]`: Moves the value to the specified `propName` prop.
- `{}-[<propName>]:style-property`: Moves the `propName` prop to the specified `style-property`.

Both `propName` and `style-property` can use dot notation for nested properties.

```typescript
// Example class
{}-[screenOptions.tabBarTintColor]/color:color-red-500

// Output
{ screenOptions: { tabBarTintColor: 'color-red-500' } }
```

### TypeScript Integration

Both `remapProps` and `cssInterop` return a typed version of your component. You can globally define types in a new declaration file.

```typescript
declare module "<3rd party package>" {
  interface 3rdPartyComponentProps {
    customClassName?: string;
  }
}
```

**Example:**

Setting global types requires detailed TypeScript knowledge. Your interface must match the third-party declaration exactly, including `extends` and generics.

For instance, Nativewind uses specific types for React Native's `<FlatList />`, which involves multiple interfaces across packages:

```typescript
import {
  ScrollViewProps,
  ScrollViewPropsAndroid,
  ScrollViewPropsIOS,
  Touchable,
  VirtualizedListProps,
} from "react-native"

declare module "@react-native/virtualized-lists" {
  export interface VirtualizedListWithoutRenderItemProps<ItemT>
    extends ScrollViewProps {
    ListFooterComponentClassName?: string
    ListHeaderComponentClassName?: string
  }
}

declare module "react-native" {
  interface ScrollViewProps
    extends ViewProps,
      ScrollViewPropsIOS,
      ScrollViewPropsAndroid,
      Touchable {
    contentContainerClassName?: string
    indicatorClassName?: string
  }

  interface FlatListProps<ItemT> extends VirtualizedListProps<ItemT> {
    columnWrapperClassName?: string
  }

  interface ViewProps {
    className?: string
  }
}
```

## Break Inside

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                       | Support     |
| --------------------------- | ----------- |
| `break-inside-auto`         | 🌐 Web only |
| `break-inside-avoid`        | 🌐 Web only |
| `break-inside-avoid-page`   | 🌐 Web only |
| `break-inside-avoid-column` | 🌐 Web only |

## Justify Self

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                  | Support     |
| ---------------------- | ----------- |
| `justify-self-auto`    | 🌐 Web only |
| `justify-self-start`   | 🌐 Web only |
| `justify-self-end`     | 🌐 Web only |
| `justify-self-center`  | 🌐 Web only |
| `justify-self-stretch` | 🌐 Web only |

## Mix Blend Mode

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                    | Support     |
| ------------------------ | ----------- |
| `mix-blend-normal`       | 🌐 Web only |
| `mix-blend-multiply`     | 🌐 Web only |
| `mix-blend-screen`       | 🌐 Web only |
| `mix-blend-overlay`      | 🌐 Web only |
| `mix-blend-darken`       | 🌐 Web only |
| `mix-blend-lighten`      | 🌐 Web only |
| `mix-blend-color-dodge`  | 🌐 Web only |
| `mix-blend-color-burn`   | 🌐 Web only |
| `mix-blend-hard-light`   | 🌐 Web only |
| `mix-blend-soft-light`   | 🌐 Web only |
| `mix-blend-difference`   | 🌐 Web only |
| `mix-blend-exclusion`    | 🌐 Web only |
| `mix-blend-hue`          | 🌐 Web only |
| `mix-blend-saturation`   | 🌐 Web only |
| `mix-blend-color`        | 🌐 Web only |
| `mix-blend-luminosity`   | 🌐 Web only |
| `mix-blend-plus-lighter` | 🌐 Web only |

## Opacity

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support         |
| ------------- | --------------- |
| `opacity-{n}` | ✅ Full Support |
| `opacity-[n]` | ✅ Full Support |

## Animation

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

**CAUTION**

Animation functionality is currently experimental. Your feedback is crucial for enhancing its implementation.

### Compatibility

| Class            | Support                 |
| ---------------- | ----------------------- |
| `animate-none`   | 🧪 Experimental Support |
| `animate-spin`   | 🧪 Experimental Support |
| `animate-ping`   | 🧪 Experimental Support |
| `animate-bounce` | 🧪 Experimental Support |
| `animate-[n]`    | 🧪 Experimental Support |

### Contributors

The animation feature in Nativewind is still experimental and basic. We welcome contributors to assist with:

- Animating all mapped properties (currently only supports `style`)
- Enhancing performance
- Updating the codebase for compatibility with Reanimated v3 features (presently written using v2 syntax)

## Order

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `order-1`     | 🌐 Web only |
| `order-2`     | 🌐 Web only |
| `order-3`     | 🌐 Web only |
| `order-4`     | 🌐 Web only |
| `order-5`     | 🌐 Web only |
| `order-6`     | 🌐 Web only |
| `order-7`     | 🌐 Web only |
| `order-8`     | 🌐 Web only |
| `order-9`     | 🌐 Web only |
| `order-10`    | 🌐 Web only |
| `order-11`    | 🌐 Web only |
| `order-12`    | 🌐 Web only |
| `order-first` | 🌐 Web only |
| `order-last`  | 🌐 Web only |
| `order-none`  | 🌐 Web only |

## Transition Delay

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION**

Animation support is currently experimental. Your feedback will help us enhance its implementation.

### Compatibility

| Class       | Support                 |
| ----------- | ----------------------- |
| `delay-{n}` | 🧪 Experimental Support |
| `delay-[n]` | 🧪 Experimental Support |

## Transition Duration

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION**

Animation support is currently experimental. Your feedback is crucial for enhancing its implementation.

### Compatibility

| Class          | Support                 |
| -------------- | ----------------------- |
| `duration-{n}` | 🧪 Experimental Support |
| `duration-[n]` | 🧪 Experimental Support |

## Place Items

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                  | Support     |
| ---------------------- | ----------- |
| `place-items-start`    | 🌐 Web only |
| `place-items-end`      | 🌐 Web only |
| `place-items-center`   | 🌐 Web only |
| `place-items-baseline` | 🌐 Web only |
| `place-items-stretch`  | 🌐 Web only |

## Transition Property

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION**

The animation support is currently experimental. We welcome your feedback to enhance its implementation.

### Compatibility

| Class                  | Support                 |
| ---------------------- | ----------------------- |
| `transition`           | 🧪 Experimental Support |
| `transition-all`       | 🧪 Experimental Support |
| `transition-colors`    | 🧪 Experimental Support |
| `transition-opacity`   | 🧪 Experimental Support |
| `transition-transform` | 🧪 Experimental Support |
| `transition-{n}`       | 🧪 Experimental Support |
| `transition-[n]`       | 🧪 Experimental Support |
| `transition-shadow`    | 🌐 Web only             |

## Platform Differences

Nativewind integrates CSS and React Native into a unified language framework. Despite this integration, there are notable differences between their style engines that developers may encounter.

### Styling per Platform

Styles can be selectively applied to different platforms using platform variants. The `native` variant is available for targeting all platforms except the web.

Supported platform modifiers include: `ios:`, `android:`, `web:`, `windows:`, `osx:`, and `native:`.

### Explicit Styles

React Native often encounters issues when styles are applied conditionally. To avoid these problems, it's recommended to declare all styles explicitly.

For instance, instead of applying a text color only for dark mode, provide both light and dark mode text colors:

```typescript
// ❌ Avoid this approach
<Text className="dark:text-white-500" />

// ✅ Prefer this approach
<Text className="text-black dark:text-red-500" />
```

### dp vs px

React Native uses density-independent pixels (dp) as its default unit, whereas the web defaults to pixels (px). Although these units differ, Nativewind treats them equivalently. This can lead to confusion in your theme regarding whether to use `10` or `10px`. The general rule is to use `10px`, and Nativewind will adjust it accordingly.

### Flex

React Native's base flex definition differs from that of the web. Typically, this discrepancy can be resolved by adding `flex-1` to your classes, but more complex layouts might require custom styles.

### Flex Direction

The default `flex-direction` in React Native is different from that on the web. This issue can be addressed by explicitly setting a `flex-direction`.

### rem Sizing

React Native's `<Text />` component defaults to a `fontSize: 14`, while the web uses `16px`. For consistency, Nativewind sets an `rem` value of `16` for the web and `14` for native platforms.

### Color Opacity

For performance reasons, Nativewind disables certain core plugins: `textOpacity`, `borderOpacity`, `divideOpacity`, and `backgroundOpacity`. These plugins allow colors to be dynamically changed via CSS variables. Instead, opacity is set as a static value in the `color` property.

If you need this functionality, you can enable these disabled plugins in your `tailwind.config.js` file.

## Clear

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `clear-left`  | 🌐 Web only |
| `clear-right` | 🌐 Web only |
| `clear-both`  | 🌐 Web only |
| `clear-none`  | 🌐 Web only |

## Place Content

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the compatibility of various place content classes:

| Class                    | Support     |
| ------------------------ | ----------- |
| `place-content-center`   | 🌐 Web only |
| `place-content-start`    | 🌐 Web only |
| `place-content-end`      | 🌐 Web only |
| `place-content-between`  | 🌐 Web only |
| `place-content-around`   | 🌐 Web only |
| `place-content-evenly`   | 🌐 Web only |
| `place-content-baseline` | 🌐 Web only |
| `place-content-stretch`  | 🌐 Web only |

## Transition Timing Function

### Usage

For detailed information, please consult the Tailwind CSS documentation.

**CAUTION:**\
Animation support is currently experimental. Your feedback will help us enhance its implementation.

### Compatibility

| Class      | Support                 |
| ---------- | ----------------------- |
| `ease-{n}` | 🧪 Experimental Support |
| `ease-[n]` | 🧪 Experimental Support |

## Rotate

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `rotate-{n}` | ✅ Full Support |
| `rotate-[n]` | ✅ Full Support |

When using arbitrary styles or defining rotation values in your theme, always specify the `deg` unit. For example: `rotate-[90deg]`.

Note that React Native exclusively supports the `deg` unit for rotations.

## Scale

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support         |
| ------------- | --------------- |
| `scale-{n}`   | ✅ Full Support |
| `scale-[n]`   | ✅ Full Support |
| `scale-x-{n}` | ✅ Full Support |
| `scale-x-[n]` | ✅ Full Support |
| `scale-y-{n}` | ✅ Full Support |
| `scale-y-[n]` | ✅ Full Support |

## Columns

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `columns-[n]` | 🌐 Web only |
| `columns-{n}` | 🌐 Web only |

## Place Self

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support     |
| -------------------- | ----------- |
| `place-self-auto`    | 🌐 Web only |
| `place-self-start`   | 🌐 Web only |
| `place-self-end`     | 🌐 Web only |
| `place-self-center`  | 🌐 Web only |
| `place-self-stretch` | 🌐 Web only |

## Skew

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `skew-x-{n}` | ✅ Full Support |
| `skew-x-[n]` | ✅ Full Support |
| `skew-y-{n}` | ✅ Full Support |
| `skew-y-[n]` | ✅ Full Support |

## Transform Origin

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                 | Support     |
| --------------------- | ----------- |
| `origin-center`       | 🌐 Web only |
| `origin-top`          | 🌐 Web only |
| `origin-top-right`    | 🌐 Web only |
| `origin-right`        | 🌐 Web only |
| `origin-bottom-right` | 🌐 Web only |
| `origin-bottom`       | 🌐 Web only |
| `origin-bottom-left`  | 🌐 Web only |
| `origin-left`         | 🌐 Web only |
| `origin-top-left`     | 🌐 Web only |

### Contributors

We are seeking contributors for the following areas:

#### feat: transform-origin

Please support this React Native Pull Request.

#### originX / originY

While `react-native-reanimated` supports `originX`/`originY`, we could incorporate these properties until React Native provides full support.

## Margin

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support status for various margin classes:

| Class     | Support         |
| --------- | --------------- |
| `m-{n}`   | ✅ Full Support |
| `m-[n]`   | ✅ Full Support |
| `mx-{n}`  | ✅ Full Support |
| `mx-[n]`  | ✅ Full Support |
| `my-{n}`  | ✅ Full Support |
| `my-[n]`  | ✅ Full Support |
| `mt-{n}`  | ✅ Full Support |
| `mt-[n]`  | ✅ Full Support |
| `mr-{n}`  | ✅ Full Support |
| `mr-[n]`  | ✅ Full Support |
| `mb-{n}`  | ✅ Full Support |
| `mb-[n]`  | ✅ Full Support |
| `ml-{n}`  | ✅ Full Support |
| `ml-[n]`  | ✅ Full Support |
| `m-auto`  | ✅ Full Support |
| `mx-auto` | ✅ Full Support |
| `my-auto` | ✅ Full Support |
| `mt-auto` | ✅ Full Support |
| `mr-auto` | ✅ Full Support |
| `mb-auto` | ✅ Full Support |
| `ml-auto` | ✅ Full Support |

## Translate

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `translate-x-{n}` | ✅ Full Support |
| `translate-x-[n]` | ✅ Full Support |
| `translate-y-{n}` | ✅ Full Support |
| `translate-y-[n]` | ✅ Full Support |

## Other Bundlers

Nativewind offers installation guidance for the two most prevalent React Native bundlers, Metro and Next.js. However, it is compatible with any bundler. To integrate Nativewind successfully, ensure these three conditions are satisfied:

1. Tailwind CSS must be configured using the Nativewind preset.
2. React Native should be set up, specifically utilizing React Native Web version 0.17 or higher.
3. The JSX runtime needs to be adjusted to `'automatic'`, and `jsxImportSource` should be assigned to `'nativewind'`.

### Troubleshooting for Web Bundlers

**Is TailwindCSS Configured?**

To verify if Tailwind CSS is correctly set up, render the following component:

```tsx
<div class="w-10 h-10 bg-red-500" />
```

A red square should appear if everything is configured properly. For setup and troubleshooting guidance, refer to the official Tailwind CSS installation instructions.

**Is React Native Web Configured?**

To test React Native Web configuration, modify your `div` as follows:

```tsx
<View style={{ $$css: true, test: "w-10 h-10 bg-blue-500" }} />
```

A blue square should be visible if the setup is correct.

**Is JSX Runtime Set to `'automatic'` and `jsxImportSource` to `'nativewind'`?**

To confirm this configuration, replace your `View` with:

```tsx
<View className="w-10 h-10 bg-blue-500" />
```

This should display a blue square if the settings are correctly applied.

## Themes

Nativewind, leveraging Tailwind CLI, supports all theming options available in Tailwind CSS. For detailed information on each className and its possible theming values, refer to the Tailwind CSS documentation.

### Dynamic Themes

To transition from a static theme to a dynamic one using Nativewind, employ CSS Variables for colors. This method provides flexibility and adaptability, allowing themes to cater to user preferences effectively.

#### tailwind.config.js

```typescript
module.exports = {
  theme: {
    colors: {
      // Define a custom color utilizing a CSS custom property
      primary: "rgb(var(--color-values) / <alpha-value>)",
    },
  },
  plugins: [
    // Set default values on the `:root` element
    ({ addBase }) =>
      addBase({
        ":root": {
          "--color-values": "255 0 0", // Default red color
          "--color-rgb": "rgb(255 0 0)",
        },
      }),
  ],
}
```

#### App.tsx

```typescript
import { vars } from 'nativewind';

const userTheme = vars({
  '--color-values': '0 255 0',   // Change to green color
  '--color-rgb': 'rgb(0 0 255)', // Change to blue color
});

export default function App() {
  return (
    <View>
      <Text className="text-primary">Access as a theme value</Text>
      <Text className="text-[--color-rgb]">Or the variable directly</Text>

      {/* Variables can be changed inline */}
      <View style={userTheme}>
        <Text className="text-primary">I am now green!</Text>
        <Text className="text-[--color-rgb]">I am now blue!</Text>
      </View>
    </View>
  );
}
```

### Switching Themes

Nativewind remains neutral regarding the implementation of theming. Below is an example supporting two themes with both light and dark modes.

#### App.jsx

```typescript
import { vars, useColorScheme } from 'nativewind';

const themes = {
  brand: {
    light: vars({
      '--color-primary': 'black',
      '--color-secondary': 'white'
    }),
    dark: vars({
      '--color-primary': 'white',
      '--color-secondary': 'dark'
    })
  },
  christmas: {
    light: vars({
      '--color-primary': 'red',
      '--color-secondary': 'green'
    }),
    dark: vars({
      '--color-primary': 'green',
      '--color-secondary': 'red'
    })
  }
};

function Theme(props) {
  const { colorScheme } = useColorScheme();
  return (
    <View style={themes[props.name][colorScheme]}>
      {props.children}
    </View>
  );
}

export default function App() {
  return (
    <Theme name="brand">
      <View className="text-primary"> {/* rgba(0, 0, 0, 1) */}</View>
      <Theme name="christmas">
        <View className="text-primary"> {/* rgba(255, 0, 0, 1) */}</View>
      </Theme>
    </Theme>
  );
}
```

### Retrieving Theme Values

#### Accessing Default Colors

To access default color values at runtime, import them directly from `tailwindcss`.

```typescript
import colors from "tailwindcss/colors";

export function MyActivityIndicator(props) {
  return <ActivityIndicator size="small" color={colors.blue.500} {...props} />;
}
```

#### Access Theme Values

For custom theme values, extract them to a shared file with your code and `tailwind.config.js`. Refer to the Tailwind CSS documentation for more details.

##### colors.ts

```typescript
module.exports = {
  tahiti: {
    100: "#cffafe",
    200: "#a5f3fc",
    300: "#67e8f9",
    400: "#22d3ee",
    500: "#06b6d4",
    600: "#0891b2",
    700: "#0e7490",
    800: "#155e75",
    900: "#164e63",
  },
}
```

##### tailwind.config.js

```typescript
const colors = require("./colors")

module.exports = {
  theme: {
    extend: {
      colors,
    },
  },
}
```

##### MyActivityIndicator.js

```typescript
import colors from "./colors";

export function MyActivityIndicator(props) {
  return <ActivityIndicator color={colors.tahiti.500} {...props} />;
}
```

### Platform-Specific Theming

#### platformSelect

`platformSelect` is equivalent to `Platform.select()`.

##### tailwind.config.js

```typescript
const { platformSelect } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      colors: {
        error: platformSelect({
          ios: "red",
          android: "blue",
          default: "green",
        }),
      },
    },
  },
}
```

#### platformColor()

Equivalent to `PlatformColor`, typically used with `platformSelect`.

##### tailwind.config.js

```typescript
const { platformColor } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      colors: {
        platformRed: platformSelect({
          android: platformColor("systemRed"),
          web: "red",
        }),
      },
    },
  },
}
```

### Device-Specific Theming

#### hairlineWidth()

Equivalent to `StyleSheet.hairlineWidth`.

##### tailwind.config.js

```typescript
const { hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        hairline: hairlineWidth(),
      },
    },
  },
}
```

#### pixelRatio()

Equivalent to `PixelRatio.get()`. If a number is provided, it returns `PixelRatio.get() * <value>`, otherwise the PixelRatio value.

##### tailwind.config.js

```typescript
const { pixelRatio } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        number: pixelRatio(2),
      },
    },
  },
}
```

#### pixelRatioSelect()

A helper function to use `PixelRatio.get()` in a conditional statement, similar to `Platform.select`.

##### tailwind.config.js

```typescript
const { pixelRatio, hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: pixelRatioSelect({
        2: 1,
        default: hairlineWidth(),
      }),
    },
  },
}
```

#### fontScale()

Equivalent to `PixelRatio.getFontScale()`. If a number is provided, it returns `PixelRatio.getFontScale() * <value>`, otherwise the `PixelRatio.getFontScale()` value.

##### tailwind.config.js

```typescript
const { fontScale } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScale(2),
      },
    },
  },
}
```

#### fontScaleSelect()

A helper function to use `PixelRatio.getFontScale()` in a conditional statement, similar to `Platform.select`.

##### tailwind.config.js

```typescript
const { fontScaleSelect, hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScaleSelect({
          2: 14,
          default: 16,
        }),
      },
    },
  },
}
```

#### getPixelSizeForLayoutSize()

Equivalent to `PixelRatio.getPixelSizeForLayoutSize()`.

##### tailwind.config.js

```typescript
const { getPixelSizeForLayoutSize } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      size: {
        custom: getPixelSizeForLayoutSize(2),
      },
    },
  },
}
```

#### roundToNearestPixel()

Equivalent to `PixelRatio.roundToNearestPixel()`.

##### tailwind.config.js

```typescript
const { roundToNearestPixel } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      size: {
        custom: roundToNearestPixel(8.4),
      },
    },
  },
}
```

## Style Specificity in Nativewind

Nativewind adopts a specificity model that mirrors CSS rules while accommodating the inline-style nature of React Native and its ecosystem.

### Problem Identification

Consider the following example:

```typescript
function MyText({ style }) {
  return <Text {...props} style={[{ color: 'black' }, style]} />;
}

remapProps(MyText, { className: 'style' });

<MyText style={{ color: 'red' }}>The text will be red on all platforms</MyText>
<MyText className="text-red-500">What color should I render as?</MyText>
```

This code snippet highlights inconsistencies across different platforms due to varying style specificity rules. For instance:

```typescript
// Native platform results in red text
<Text style={{ color: 'black' }, { color: 'red' }} />

// Web platform results in black text
<Text className="text-red-500" style={{ color: 'black'}} />
```

### Specificity Order

Nativewind defines the following specificity order from highest to lowest:

1. Styles marked as important (following CSS specificity rules)
2. Inline & remapped styles (applied in right-to-left order)
3. `className` styles (following CSS specificity rules)

### Concept of Remapped Styles

Remapped styles are a unique feature introduced by Nativewind, absent in traditional CSS. These styles translate from a `className` to a prop and are applied inline, preserving the style order for consistency with existing React Native components.

### Addressing Styling Differences

To resolve styling discrepancies across platforms, Nativewind supports the use of the `!important` modifier. This reverts the styles to a specificity-based order, ensuring consistent rendering.

### Examples

#### Basic Components

```typescript
// Basic components example
<Text className="text-red-500" style={{ color: 'green' }} /> // Results in green text
<Text className="!text-red-500" style={{ color: 'green' }} /> // Results in red text

// Remapped components (reusing the initial problem example)
<MyText className="text-red-500" /> // Native: red, Web: black
<MyText className="!text-red-500" /> // Both platforms: red
```

This reformatted content maintains the original information while ensuring clarity and consistency in presentation.

## Padding

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support for various padding classes:

| Class     | Support         |
| --------- | --------------- |
| `p-{n}`   | ✅ Full Support |
| `p-[n]`   | ✅ Full Support |
| `px-{n}`  | ✅ Full Support |
| `px-[n]`  | ✅ Full Support |
| `py-{n}`  | ✅ Full Support |
| `py-[n]`  | ✅ Full Support |
| `pt-{n}`  | ✅ Full Support |
| `pt-[n]`  | ✅ Full Support |
| `pr-{n}`  | ✅ Full Support |
| `pr-[n]`  | ✅ Full Support |
| `pb-{n}`  | ✅ Full Support |
| `pb-[n]`  | ✅ Full Support |
| `pl-{n}`  | ✅ Full Support |
| `pl-[n]`  | ✅ Full Support |
| `p-auto`  | 🌐 Web only     |
| `px-auto` | 🌐 Web only     |
| `py-auto` | 🌐 Web only     |
| `pt-auto` | 🌐 Web only     |
| `pr-auto` | 🌐 Web only     |
| `pb-auto` | 🌐 Web only     |
| `pl-auto` | 🌐 Web only     |

## Accent Color

### Usage

For detailed instructions and guidelines, please consult the Tailwind CSS documentation available on their official website.

### Compatibility

The following table outlines the compatibility of various accent classes with different platforms:

| Class                | Support  |
| -------------------- | -------- |
| `accent-{n}`         | Web only |
| `accent-[n]`         | Web only |
| `accent-black`       | Web only |
| `accent-white`       | Web only |
| `accent-transparent` | Web only |
| `accent-inherit`     | Web only |
| `accent-current`     | Web only |

### Contributors

We welcome contributions in the following areas:

#### Add `accent-{value}`

React Native currently lacks support for an `accent` value, although many third-party libraries do provide it. A potential solution could involve allowing `accent` to compile but stripping it if not used within a `nativeStyleProps` mapping.

## Appearance

### Usage

For detailed information, please consult the official Tailwind CSS documentation.

### Compatibility

| Class             | Support     |
| ----------------- | ----------- |
| `appearance-none` | 🌐 Web only |

---

This reformatted content maintains the original structure and intent while ensuring clarity and adherence to markdown formatting standards.

## Caret Color

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class               | Support         |
| ------------------- | --------------- |
| `caret-{n}`         | ✅ Full Support |
| `caret-[n]`         | ✅ Full Support |
| `caret-black`       | ✅ Full Support |
| `caret-white`       | ✅ Full Support |
| `caret-transparent` | ✅ Full Support |
| `caret-inherit`     | 🌐 Web only     |
| `caret-current`     | 🌐 Web only     |

### Contributors

We are seeking contributors to work on the following:

#### Add `pointer-events-none`

The `caretColor` should correspond with `cursorColor`.

## Cursor

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support     |
| ------------ | ----------- |
| `cursor-{n}` | 🌐 Web only |
| `cursor-[n]` | 🌐 Web only |

## Container

Nativewind's default breakpoints are currently based on web defaults and have not been specifically tailored for native devices.

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class       | Support         |
| ----------- | --------------- |
| `container` | ✅ Full Support |

## Space Between

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

**CAUTION:**\
The `space-{n}` utility was temporarily removed in version 4. Instead, use `gap-*` utilities to add space between elements. It will be reintroduced once React Native supports `display: 'block'`.

### Compatibility

| Class             | Support     |
| ----------------- | ----------- |
| `space-{n}`       | 🌐 Web only |
| `space-[n]`       | 🌐 Web only |
| `space-x-{n}`     | 🌐 Web only |
| `space-x-[n]`     | 🌐 Web only |
| `space-y-{n}`     | 🌐 Web only |
| `space-y-[n]`     | 🌐 Web only |
| `space-x-reverse` | 🌐 Web only |
| `space-y-reverse` | 🌐 Web only |

## Pointer Events

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                     | Support         |
| ------------------------- | --------------- |
| `pointer-events-none`     | ✅ Full Support |
| `pointer-events-auto`     | ✅ Full Support |
| `pointer-events-box-none` | 📱 Native only  |
| `pointer-events-box-only` | 📱 Native only  |

## Height

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class      | Support         |
| ---------- | --------------- |
| `h-{n}`    | ✅ Full Support |
| `h-[n]`    | ✅ Full Support |
| `h-full`   | ✅ Full Support |
| `h-screen` | ✅ Full Support |
| `h-auto`   | 🌐 Web only     |
| `h-min`    | 🌐 Web only     |
| `h-max`    | 🌐 Web only     |
| `h-fit`    | 🌐 Web only     |

## Resize

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `resize-none` | 🌐 Web only |
| `resize-y`    | 🌐 Web only |
| `resize-x`    | 🌐 Web only |
| `resize`      | 🌐 Web only |

## Scroll Behavior

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class           | Support     |
| --------------- | ----------- |
| `scroll-auto`   | 🌐 Web only |
| `scroll-smooth` | 🌐 Web only |

## Safe Area Insets

### Overview

Safe Area Insets refer to the screen areas not covered by elements like the notch, home indicator, or rounded corners. These insets are crucial for placing content so it remains visible and unobstructed by system UI components.

### Usage (Native)

For native applications, safe area measurements can be accessed using `react-native-safe-area-context`. It's essential to wrap your application with a `SafeAreaProvider` and utilize the `useSafeAreaEnv` hook to retrieve the safe area insets.

```typescript
import { View } from "react-native";
import { SafeAreaProvider } from "react-native-safe-area-context";

export function MyApp(props) {
  // Ensure SafeAreaProvider is at the root of your app
  return (
    <SafeAreaProvider>
      <View className="p-safe" {...props} />
    </SafeAreaProvider>
  );
}
```

Note: Expo Router automatically includes `<SafeAreaProvider />` in every route, so additional setup is unnecessary.

### Usage (Web)

For web applications, CSS stylesheets can leverage the `env()` function without requiring extra configuration. However, for certain utilities like `h-screen-safe` and `min-h-screen-safe`, issues may arise on Google Chrome. To address this, apply `height: -webkit-fill-available` to parent elements:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    height: -webkit-fill-available;
  }

  body {
    height: -webkit-fill-available;
  }

  #root {
    height: -webkit-fill-available;
  }
}
```

### Compatibility

| Class | Support | Comments |
| --- | --- | --- |
| `m-safe` | ✅ Full Support | Applies margins using safe area insets: `margin-top`, `margin-bottom`, `margin-left`, and `margin-right`. |
| `p-safe` | ✅ Full Support | Applies padding using safe area insets: `padding-top`, `padding-bottom`, `padding-left`, and `padding-right`. |
| `mx-safe` | ✅ Full Support | Sets horizontal margins with safe area insets. |
| `px-safe` | ✅ Full Support | Sets horizontal padding with safe area insets. |
| `my-safe` | ✅ Full Support | Sets vertical margins using safe area insets. |
| `py-safe` | ✅ Full Support | Sets vertical padding using safe area insets. |
| `mt-safe` | ✅ Full Support | Applies top margin with a safe area inset. |
| `pt-safe` | ✅ Full Support | Applies top padding with a safe area inset. |
| `mr-safe` | ✅ Full Support | Sets right margin using a safe area inset. |
| `pr-safe` | ✅ Full Support | Sets right padding using a safe area inset. |
| `mb-safe` | ✅ Full Support | Applies bottom margin with a safe area inset. |
| `pb-safe` | ✅ Full Support | Applies bottom padding with a safe area inset. |
| `ml-safe` | ✅ Full Support | Sets left margin using a safe area inset. |
| `pl-safe` | ✅ Full Support | Sets left padding using a safe area inset. |
| `*-safe-or-[n]` | ✅ Full Support | Allows substitution of any spacing utility (`*`) and value (`[n]`). Example: `mt-safe-or-4` translates to `margin-top: max(env(safe-area-inset-top), 1rem);`. Another example is `mt-safe-or-[2px]`, resulting in `margin-top: max(env(safe-area-inset-top), 2px);`. |
| `h-screen-safe` | 🌐 Web only | Adjusts height using safe area insets: `height: calc(100vh - (env(safe-area-inset-top) + env(safe-area-inset-bottom)))`. |
| `*-safe-offset-[n]` | 🌐 Web only | Allows substitution of any spacing utility (`*`) and value (`[n]`). Example: `mt-safe-offset-4` results in `margin-top: calc(env(safe-area-inset-top) + 1rem);`. Another example is `mt-safe-offset-[2px]`, resulting in `margin-top: calc(env(safe-area-inset-top) + 2px);`. |

## Display

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support         |
| -------------------- | --------------- |
| `flex`               | ✅ Full Support |
| `hidden`             | ✅ Full Support |
| `block`              | 🌐 Web only     |
| `inline-block`       | 🌐 Web only     |
| `inline`             | 🌐 Web only     |
| `inline-flex`        | 🌐 Web only     |
| `table`              | 🌐 Web only     |
| `inline-table`       | 🌐 Web only     |
| `table-caption`      | 🌐 Web only     |
| `table-cell`         | 🌐 Web only     |
| `table-column`       | 🌐 Web only     |
| `table-column-group` | 🌐 Web only     |
| `table-footer-group` | 🌐 Web only     |
| `table-header-group` | 🌐 Web only     |
| `table-row-group`    | 🌐 Web only     |
| `table-row`          | 🌐 Web only     |
| `flow-root`          | 🌐 Web only     |
| `grid`               | 🌐 Web only     |
| `inline-grid`        | 🌐 Web only     |
| `contents`           | 🌐 Web only     |
| `list-item`          | 🌐 Web only     |

## Max-Height

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `max-h-0`      | ✅ Full Support |
| `max-h-[n]`    | ✅ Full Support |
| `max-h-{n}`    | ✅ Full Support |
| `max-h-full`   | ✅ Full Support |
| `max-h-screen` | ✅ Full Support |
| `max-h-min`    | 🌐 Web only     |
| `max-h-max`    | 🌐 Web only     |
| `max-h-fit`    | 🌐 Web only     |

## Scroll Margin

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following classes are supported exclusively on web platforms:

| Class           | Support     |
| --------------- | ----------- |
| `scroll-m-{n}`  | 🌐 Web only |
| `scroll-m-[n]`  | 🌐 Web only |
| `scroll-mx-{n}` | 🌐 Web only |
| `scroll-mx-[n]` | 🌐 Web only |
| `scroll-my-{n}` | 🌐 Web only |
| `scroll-my-[n]` | 🌐 Web only |
| `scroll-mt-{n}` | 🌐 Web only |
| `scroll-mt-[n]` | 🌐 Web only |
| `scroll-mr-{n}` | 🌐 Web only |
| `scroll-mr-[n]` | 🌐 Web only |
| `scroll-mb-{n}` | 🌐 Web only |
| `scroll-mb-[n]` | 🌐 Web only |
| `scroll-ml-{n}` | 🌐 Web only |
| `scroll-ml-[n]` | 🌐 Web only |

## Max-Width

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class              | Support         |
| ------------------ | --------------- |
| `max-w-0`          | ✅ Full Support |
| `max-w-[n]`        | ✅ Full Support |
| `max-w-{n}`        | ✅ Full Support |
| `max-w-full`       | ✅ Full Support |
| `max-w-screen-sm`  | ✅ Full Support |
| `max-w-screen-md`  | ✅ Full Support |
| `max-w-screen-lg`  | ✅ Full Support |
| `max-w-screen-xl`  | ✅ Full Support |
| `max-w-screen-2xl` | ✅ Full Support |
| `max-w-min`        | 🌐 Web only     |
| `max-w-max`        | 🌐 Web only     |
| `max-w-fit`        | 🌐 Web only     |
| `max-w-prose`      | 🌐 Web only     |

## Scroll Padding

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following classes are supported exclusively on web platforms:

| Class           | Support     |
| --------------- | ----------- |
| `scroll-p-{n}`  | 🌐 Web only |
| `scroll-p-[n]`  | 🌐 Web only |
| `scroll-px-{n}` | 🌐 Web only |
| `scroll-px-[n]` | 🌐 Web only |
| `scroll-py-{n}` | 🌐 Web only |
| `scroll-py-[n]` | 🌐 Web only |
| `scroll-pt-{n}` | 🌐 Web only |
| `scroll-pt-[n]` | 🌐 Web only |
| `scroll-pr-{n}` | 🌐 Web only |
| `scroll-pr-[n]` | 🌐 Web only |
| `scroll-pb-{n}` | 🌐 Web only |
| `scroll-pb-[n]` | 🌐 Web only |
| `scroll-pl-{n}` | 🌐 Web only |
| `scroll-pl-[n]` | 🌐 Web only |

## Scroll Snap Align

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support     |
| ----------------- | ----------- |
| `snap-start`      | 🌐 Web only |
| `snap-end`        | 🌐 Web only |
| `snap-center`     | 🌐 Web only |
| `snap-align-none` | 🌐 Web only |

## Floats

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `float-right` | 🌐 Web only |
| `float-left`  | 🌐 Web only |
| `float-none`  | 🌐 Web only |

## Scroll Snap Stop

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `snap-normal` | 🌐 Web only |
| `snap-always` | 🌐 Web only |

## Min-Height

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `min-h-0`    | ✅ Full Support |
| `min-h-[n]`  | ✅ Full Support |
| `min-h-full` | ✅ Full Support |
| `min-h-min`  | 🌐 Web only     |
| `min-h-max`  | 🌐 Web only     |
| `min-h-fit`  | 🌐 Web only     |

```typescript
type MinHeightClasses = {
  "min-h-0": string
  "min-h-[n]": string
  "min-h-full": string
  "min-h-min": string
  "min-h-max": string
  "min-h-fit": string
}
```

## Scroll Snap Type

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `snap-none`      | 🌐 Web only |
| `snap-x`         | 🌐 Web only |
| `snap-y`         | 🌐 Web only |
| `snap-both`      | 🌐 Web only |
| `snap-mandatory` | 🌐 Web only |
| `snap-proximity` | 🌐 Web only |

## Touch Action

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support for various touch action classes:

| Class                | Support     |
| -------------------- | ----------- |
| `touch-auto`         | 🌐 Web only |
| `touch-none`         | 🌐 Web only |
| `touch-pan-x`        | 🌐 Web only |
| `touch-pan-left`     | 🌐 Web only |
| `touch-pan-right`    | 🌐 Web only |
| `touch-pan-y`        | 🌐 Web only |
| `touch-pan-up`       | 🌐 Web only |
| `touch-pan-down`     | 🌐 Web only |
| `touch-pinch-zoom`   | 🌐 Web only |
| `touch-manipulation` | 🌐 Web only |

## Configuration

Nativewind utilizes the same configuration file as Tailwind CSS, namely `tailwind.config.js`. For detailed guidance on configuring your project, refer to the Tailwind CSS documentation.

### Metro Configuration

#### `input`

**Required**

- **Type:** `string`
- Description: Specifies the path to the entry file for your Tailwind styles.

#### `projectRoot`

- **Default:** `process.cwd()`
- Description: Indicates the root directory of your project.

#### `outputDir`

- **Default:** `node_modules/.cache/nativewind`
- Description: Defines the relative path from `projectRoot` where generated styles should be saved.

#### `configFile`

- **Default:** `tailwind.config.js`
- Description: Specifies the location of your Tailwind configuration file.

#### `cliCommand`

- **Default:** `node node_modules/tailwind/lib/cli.js`
- Description: The command used to execute the Tailwind CLI.

#### `browserslist`

- **Default:** `last 1 versions`
- Description: Determines the browserslist and autoprefixer settings.

#### `browserslistEnv`

- **Default:** `native`
- Description: Sets the environment for browserslist and autoprefixer.

#### `hotServerOptions`

- **Default:** `{ port: <next-available> }`
- Description: Provides options for the development hot reloading server via `ws`.

## Isolation

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `isolate`        | 🌐 Web only |
| `isolation-auto` | 🌐 Web only |

## Min-Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `min-w-0`    | ✅ Full Support |
| `min-w-[n]`  | ✅ Full Support |
| `min-w-full` | ✅ Full Support |
| `min-w-min`  | 🌐 Web only     |
| `min-w-max`  | 🌐 Web only     |
| `min-w-fit`  | 🌐 Web only     |

```typescript
// TypeScript typings for min-width classes

type MinWidthClasses =
  | "min-w-0"
  | `min-w-[${string}]`
  | "min-w-full"
  | "min-w-min"
  | "min-w-max"
  | "min-w-fit"
```

## User Select

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support     |
| ------------- | ----------- |
| `select-none` | 🌐 Web only |
| `select-text` | 🌐 Web only |
| `select-all`  | 🌐 Web only |
| `select-auto` | 🌐 Web only |

### Contributors

We are seeking contributors for the following task:

#### Add `select-[n]`

The `userSelect` feature was introduced in React Native version 0.71.

## Width

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class      | Support         |
| ---------- | --------------- |
| `w-{n}`    | ✅ Full Support |
| `w-[n]`    | ✅ Full Support |
| `w-full`   | ✅ Full Support |
| `w-screen` | ✅ Full Support |
| `w-auto`   | 🌐 Web only     |
| `w-min`    | 🌐 Web only     |
| `w-max`    | 🌐 Web only     |
| `w-fit`    | 🌐 Web only     |

## Will Change

### Usage

For usage instructions, please consult the Tailwind CSS documentation on their official website.

### Compatibility

| Class                   | Support     |
| ----------------------- | ----------- |
| `will-change-auto`      | 🌐 Web only |
| `will-change-scroll`    | 🌐 Web only |
| `will-change-contents`  | 🌐 Web only |
| `will-change-transform` | 🌐 Web only |

### Contributors

We are seeking contributors for the following task:

#### Add `will-change-transform`

In scenarios where a component includes transition or animation class names, it utilizes `react-native-reanimated`'s `Animated.createAnimatedComponent()` to enable animations. If these class names are conditional, this can lead to the component unmounting because Nativewind may conditionally render two distinct components.

A suggested solution is to implement `will-change-transform`, ensuring that the component remains animated even when not strictly necessary.

## Fill

### Usage

React Native lacks built-in SVG components, but you can achieve universal SVG support using third-party libraries like `react-native-svg`. Although these instructions reference `react-native-svg`, the principles are applicable to other similar libraries.

To style these components correctly for native platforms, it's necessary to use `cssInterop()` on them.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `fill-{n}`     | ✅ Full Support |
| `fill-[n]`     | ✅ Full Support |
| `fill-inherit` | 🌐 Web only     |
| `fill-current` | 🌐 Web only     |

## Content

### Usage

For usage instructions, please consult the official Tailwind CSS documentation.

### Compatibility

| Class          | Support     |
| -------------- | ----------- |
| `content-none` | 🌐 Web only |

## Stroke

### Usage

React Native lacks built-in SVG components, but you can achieve universal SVG support using third-party libraries like `react-native-svg`. Although these instructions reference `react-native-svg`, the principles are applicable to other similar libraries.

To style these components correctly for native platforms, it's necessary to use `cssInterop()` on them.

### Compatibility

| Class            | Support         |
| ---------------- | --------------- |
| `stroke-{n}`     | ✅ Full Support |
| `stroke-[n]`     | ✅ Full Support |
| `stroke-inherit` | 🌐 Web only     |
| `stroke-current` | 🌐 Web only     |

```typescript
// Example TypeScript typings for stroke classes

type StrokeClasses =
  | `stroke-${number}`
  | `stroke-[${number}]`
  | "stroke-inherit"
  | "stroke-current"
```

This table and code snippet provide an overview of the support level for various stroke-related CSS classes in a React Native environment using SVG libraries.

## Stroke Width

### Usage

React Native lacks built-in SVG components, but you can achieve universal SVG support using third-party libraries like `react-native-svg`. Although these instructions reference `react-native-svg`, the principles are applicable to other similar libraries. To style these components correctly for native platforms, it's necessary to use `cssInterop()`.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `stroke-{n}` | ✅ Full Support |
| `stroke-[n]` | ✅ Full Support |

## Object Fit

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class               | Support     |
| ------------------- | ----------- |
| `object-contain`    | 🌐 Web only |
| `object-cover`      | 🌐 Web only |
| `object-fill`       | 🌐 Web only |
| `object-none`       | 🌐 Web only |
| `object-scale-down` | 🌐 Web only |

### Contributors

We welcome contributions in the following areas:

#### Add `object-fit`

The `object-fit` property was introduced in React Native version 0.71.

## Font Family

### Usage

For guidance on using fonts, please consult the Tailwind CSS documentation. React Native handles font loading differently across iOS and Android platforms. To ensure consistent font usage across all platforms while utilizing Tailwind CSS effectively, it is recommended to follow the instructions provided at [react-native-font-demo](https://github.com/jsamr/react-native-font-demo).

#### Differences on Native

React Native does not support fallback fonts. If an array of fonts is specified, Nativewind will only utilize the first font in the list.

#### Adding Fonts to Your Theme

Nativewind does not automatically load or link fonts into your application. Should you encounter issues with font families or weights not displaying correctly, it's advisable to first confirm that they work as expected when applied using inline styles.

```typescript
import { platformSelect } from "nativewind/theme"

module.exports = {
  theme: {
    extend: {
      fontFamily: {
        example: ["ExampleFontFamily"],
        system: platformSelect({
          ios: "Georgia",
          android: "sans-serif",
          default: "ui-sans-serif",
        }),
      },
    },
  },
}
```

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `font-sans`  | ✅ Full Support |
| `font-serif` | ✅ Full Support |
| `font-mono`  | ✅ Full Support |
| `font-[n]`   | ✅ Full Support |
| `font-{n}`   | ✅ Full Support |

## Font Size

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### `rem` Scaling

Tailwind CSS defaults to using `rem` units for font sizes. To enhance performance, Nativewind inlines these `rem` values across all platforms except Web. The default `rem` values used by Nativewind are:

- **Web**: `16px`
- **Other Platforms**: `14px`, aligning with React Native's default Text size

For sections of your app requiring dynamically scaling text, using a CSS variable is recommended.

#### Configuration in `tailwind.config.js`

```typescript
module.exports = {
  theme: {
    extend: {
      fontSize: {
        dynamic: "var(--font-size-dynamic)",
      },
    },
  },
}
```

#### Scaling Text Based on Screen Width

To scale text dynamically with screen width, utilize CSS variables and media queries. Note that Nativewind does not support media queries directly on `:root`, so a class is necessary.

##### Example in `global.css`

```css
@media (min-width: 640px) {
  .text-root {
    --font-size-dynamic: 16px;
  }
}

@media (min-width: 768px) {
  .text-root {
    --font-size-dynamic: 18px;
  }
}
```

##### Example in `App.tsx`

```typescript
export default function App() {
  return (
    <Text className="text-root">
      <Text className="text-[--font-size-dynamic]">I scale with screen width</Text>
    </Text>
  );
}
```

#### Modifying the Default Inlined `rem` Value

To change the default inlined `rem` value, adjust it within your `metro.config.js`.

##### Example in `metro.config.js`

```typescript
module.exports = withNativeWind({
  input: "./global.css",
  inlineRem: 16,
})
```

#### Disabling `inlineRem`

Disabling the inlining behavior is possible by setting `inlineRem` to `false`.

##### Example in `metro.config.js`

```typescript
module.exports = withNativeWind({
  input: "./global.css",
  inlineRem: false,
})
```

After disabling, specify your own `rem` value within your CSS.

##### Example in `global.css`

```css
:root {
  font-size: 16px;
}
```

### Compatibility

| Class       | Support         |
| ----------- | --------------- |
| `text-{n}`  | ✅ Full Support |
| `text-[n]`  | ✅ Full Support |
| `text-base` | ✅ Full Support |

## Object Position

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the compatibility of various classes:

| Class                 | Support     |
| --------------------- | ----------- |
| `object-bottom`       | 🌐 Web only |
| `object-center`       | 🌐 Web only |
| `object-left`         | 🌐 Web only |
| `object-left-bottom`  | 🌐 Web only |
| `object-left-top`     | 🌐 Web only |
| `object-right`        | 🌐 Web only |
| `object-right-bottom` | 🌐 Web only |
| `object-right-top`    | 🌐 Web only |
| `object-top`          | 🌐 Web only |

## Font Smoothing

### Usage

For detailed instructions, consult the Tailwind CSS documentation.

### Compatibility

| Class                  | Support         |
| ---------------------- | --------------- |
| `antialiased`          | ✅ Full Support |
| `subpixel-antialiased` | ✅ Full Support |

## Editor Setup

For detailed information on setting up your editor with Tailwind CSS, please consult the official documentation available on the Tailwind CSS website.

### Custom ClassName Props

The `cssInterop`/`remapProps` functionality enables you to define custom className props. To implement this feature, refer to the specific plugin's documentation for guidance on adding these attributes to the list of checked classAttributes.

#### Example Setup with VS Code

Below is an example demonstrating how to use a custom component with `cssInterop(Component, { headerClassName: 'headerStyle' })` in Visual Studio Code:

```json
{
  "tailwindCSS.classAttributes": ["class", "className", "headerClassName"]
}
```

This configuration allows you to specify additional class attributes that Tailwind CSS will recognize and apply.

```markdown
## Content Rules in Nativewind

Nativewind adheres to the same content configuration guidelines as Tailwind CSS. For detailed information and solutions to potential issues, consult the official Tailwind CSS documentation.
```

This reformatted markdown maintains the original message while ensuring clarity and conciseness for an AI context.

## Overflow

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support         |
| -------------------- | --------------- |
| `visible`            | ✅ Full Support |
| `hidden`             | ✅ Full Support |
| `scroll`             | ✅ Full Support |
| `overflow-auto`      | 🌐 Web only     |
| `overflow-clip`      | 🌐 Web only     |
| `overflow-x-auto`    | 🌐 Web only     |
| `overflow-y-auto`    | 🌐 Web only     |
| `overflow-x-hidden`  | 🌐 Web only     |
| `overflow-y-hidden`  | 🌐 Web only     |
| `overflow-x-clip`    | 🌐 Web only     |
| `overflow-y-clip`    | 🌐 Web only     |
| `overflow-x-visible` | 🌐 Web only     |
| `overflow-y-visible` | 🌐 Web only     |
| `overflow-x-scroll`  | 🌐 Web only     |
| `overflow-y-scroll`  | 🌐 Web only     |

## Font Style

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class        | Support         |
| ------------ | --------------- |
| `italic`     | ✅ Full Support |
| `not-italic` | ✅ Full Support |

## Font Variant Numeric

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class                | Support         |
| -------------------- | --------------- |
| `normal-nums`        | ✅ Full Support |
| `ordinal`            | ✅ Full Support |
| `slashed-zero`       | ✅ Full Support |
| `lining-nums`        | ✅ Full Support |
| `oldstyle-nums`      | ✅ Full Support |
| `proportional-nums`  | ✅ Full Support |
| `tabular-nums`       | ✅ Full Support |
| `diagonal-fractions` | ✅ Full Support |
| `stacked-fractions`  | ✅ Full Support |

## Font Weight

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `font-thin`       | ✅ Full Support |
| `font-extralight` | ✅ Full Support |
| `font-light`      | ✅ Full Support |
| `font-normal`     | ✅ Full Support |
| `font-medium`     | ✅ Full Support |
| `font-semibold`   | ✅ Full Support |
| `font-bold`       | ✅ Full Support |
| `font-extrabold`  | ✅ Full Support |
| `font-black`      | ✅ Full Support |

## Theme

Nativewind leverages the same theme values as Tailwind CSS, allowing you to configure your project using the Tailwind CSS documentation.

In dynamic React Native applications, helper functions like `Platform.select` and `PixelRatio` are commonly used. Nativewind provides similar helpers that can be integrated into your theme configuration.

### platformSelect

The `platformSelect` function is analogous to `Platform.select()` in React Native.

```typescript
// tailwind.config.js

const { platformSelect } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      colors: {
        error: platformSelect({
          ios: "red",
          android: "blue",
          default: "green",
        }),
      },
    },
  },
}
```

#### platformColor()

This function is equivalent to `PlatformColor` and is often used with `platformSelect`.

```typescript
const { platformColor } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      colors: {
        platformRed: platformSelect({
          android: platformColor("systemRed"),
          web: "red",
        }),
      },
    },
  },
}
```

#### hairlineWidth()

This function is equivalent to `StyleSheet.hairlineWidth`.

```typescript
const { hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        hairline: hairlineWidth(),
      },
    },
  },
}
```

#### pixelRatio()

This function is equivalent to `PixelRatio.get()`. If a number is provided, it returns `PixelRatio.get() * <value>`, otherwise, it returns the PixelRatio value.

```typescript
const { pixelRatio } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        number: pixelRatio(2),
      },
    },
  },
}
```

#### pixelRatioSelect()

A helper function to use `PixelRatio.get()` in a conditional statement, similar to `Platform.select`.

```typescript
const { pixelRatio, hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      borderWidth: pixelRatioSelect({
        2: 1,
        default: hairlineWidth(),
      }),
    },
  },
}
```

#### fontScale()

This function is equivalent to `PixelRatio.getFontScale()`. If a number is provided, it returns `PixelRatio.getFontScale() * <value>`, otherwise, it returns the `PixelRatio.getFontScale()` value.

```typescript
const { fontScale } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScale(2),
      },
    },
  },
}
```

#### fontScaleSelect()

A helper function to use `PixelRatio.getFontScale()` in a conditional statement, similar to `Platform.select`.

```typescript
const { fontScaleSelect, hairlineWidth } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScaleSelect({
          2: 14,
          default: 16,
        }),
      },
    },
  },
}
```

#### getPixelSizeForLayoutSize()

This function is equivalent to `PixelRatio.getPixelSizeForLayoutSize()`.

```typescript
const { getPixelSizeForLayoutSize } = require("nativewind")

module.exports = {
  theme: {
    extend: {
      size: {
        custom: getPixelSizeForLayoutSize(2),
      },
    },
  },
}
```

#### roundToNearestPixel()

This function is equivalent to `PixelRatio.roundToNearestPixel()`.

```typescript
const { roundToNearestPixel } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      size: {
        custom: roundToNearestPixel(8.4),
      },
    },
  },
}
```

## Overscroll Behavior

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

The following table outlines the support for various overscroll behavior classes:

| Class                  | Support     |
| ---------------------- | ----------- |
| `overscroll-auto`      | 🌐 Web only |
| `overscroll-contain`   | 🌐 Web only |
| `overscroll-none`      | 🌐 Web only |
| `overscroll-y-auto`    | 🌐 Web only |
| `overscroll-y-contain` | 🌐 Web only |
| `overscroll-y-none`    | 🌐 Web only |
| `overscroll-x-auto`    | 🌐 Web only |
| `overscroll-x-contain` | 🌐 Web only |
| `overscroll-x-none`    | 🌐 Web only |

## Hyphens

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class            | Support     |
| ---------------- | ----------- |
| `hyphens-none`   | 🌐 Web only |
| `hyphens-manual` | 🌐 Web only |
| `hyphens-auto`   | 🌐 Web only |

## Letter Spacing

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class              | Support         |
| ------------------ | --------------- |
| `tracking-tighter` | ✅ Full Support |
| `tracking-tight`   | ✅ Full Support |
| `tracking-normal`  | ✅ Full Support |
| `tracking-wide`    | ✅ Full Support |
| `tracking-wider`   | ✅ Full Support |
| `tracking-widest`  | ✅ Full Support |

## Position

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class      | Support         |
| ---------- | --------------- |
| `absolute` | ✅ Full Support |
| `relative` | ✅ Full Support |
| `fixed`    | 🌐 Web only     |
| `sticky`   | 🌐 Web only     |

## Line Clamp

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `line-clamp-1`    | ✅ Full Support |
| `line-clamp-2`    | ✅ Full Support |
| `line-clamp-3`    | ✅ Full Support |
| `line-clamp-4`    | ✅ Full Support |
| `line-clamp-5`    | ✅ Full Support |
| `line-clamp-6`    | ✅ Full Support |
| `line-clamp-none` | ✅ Full Support |

## Line Height

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

React Native does not support relative line height utilities due to its lack of `em` unit support.

| Class             | Support         |
| ----------------- | --------------- |
| `leading-{n}`     | ✅ Full Support |
| `leading-[n]`     | ✅ Full Support |
| `leading-none`    | 🌐 Web only     |
| `leading-tight`   | 🌐 Web only     |
| `leading-snug`    | 🌐 Web only     |
| `leading-normal`  | 🌐 Web only     |
| `leading-relaxed` | 🌐 Web only     |
| `leading-loose`   | 🌐 Web only     |

## Using Nativewind with Monorepos

Learn how to integrate Nativewind into monorepo environments such as those managed by Nx.

Nativewind can be seamlessly integrated into an Nx Monorepo that is already set up with Expo and the corresponding plugin `@nx/expo`.

### Setting Up NX Monorepo

When incorporating Nativewind into an Nx monorepo, specific configurations are necessary to ensure smooth integration. The primary challenge lies in configuring the Metro bundler to work effectively alongside both Nx and Nativewind.

#### Prerequisites

Begin by setting up your Expo project within Nx according to the standard Expo setup guide. You can skip the initial `metro.config.js` configuration as it will be addressed here.

#### Modifying metro.config.js

To integrate the Nativewind plugin into your `metro.config.js`, use a promise chain as demonstrated below:

```typescript
const { withNativeWind } = require("nativewind/metro")

// ... existing Nx configuration

module.exports = withNxMetro(mergeConfig(defaultConfig, customConfig), {
  // ... existing Nx config
}).then((config) => withNativeWind(config, { input: "./global.css" }))
```

### Additional Resources

For more complex monorepo setups or specific issues, consider consulting:

- NX documentation for React Native
- NX documentation for Expo
- Expo documentation for monorepos

## Colors

Customize your colors similarly to Tailwind CSS. For more details, refer to the Tailwind CSS documentation.

### Platform-Specific Colors

Native platforms have unique system colors accessible through `PlatformColor`, unlike the web's common color palette.

Nativewind provides access to these platform-specific colors using the `platformColor()` utility.

```typescript
// tailwind.config.js

const { platformSelect, platformColor } = require("nativewind/theme")

module.exports = {
  theme: {
    extend: {
      colors: {
        error: platformSelect({
          // Provide platform-specific values here
          ios: platformColor("systemRed"),
          android: platformColor("?android:colorError"),
          default: "red",
        }),
      },
    },
  },
}
```

## Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `inset-{n}`    | ✅ Full Support |
| `inset-[n]`    | ✅ Full Support |
| `inset-x-{n}`  | ✅ Full Support |
| `inset-y-[n]`  | ✅ Full Support |
| `top-{n}`      | ✅ Full Support |
| `top-[n]`      | ✅ Full Support |
| `bottom-{n}`   | ✅ Full Support |
| `bottom-[n]`   | ✅ Full Support |
| `left-{n}`     | ✅ Full Support |
| `left-[n]`     | ✅ Full Support |
| `right-{n}`    | ✅ Full Support |
| `right-[n]`    | ✅ Full Support |
| `inset-auto`   | 🌐 Web only     |
| `inset-x-auto` | 🌐 Web only     |
| `inset-y-auto` | 🌐 Web only     |
| `top-auto`     | 🌐 Web only     |
| `bottom-auto`  | 🌐 Web only     |
| `left-auto`    | 🌐 Web only     |
| `right-auto`   | 🌐 Web only     |

## List Style Image

### Usage

For detailed instructions, please consult the official Tailwind CSS documentation.

### Compatibility

| Class             | Support         |
| ----------------- | --------------- |
| `list-image-none` | ✅ Full Support |

---

This reformatted content maintains the original structure and information while ensuring clarity and consistency in presentation.

## Visibility

In native implementations, the `Visibility` class names correspond to CSS `opacity` rather than `visibility`.

### Usage

For detailed information, consult the Tailwind CSS documentation.

### Compatibility

| Class       | Support         |
| ----------- | --------------- |
| `visible`   | ✅ Full Support |
| `invisible` | ✅ Full Support |
| `collapse`  | 🌐 Web only     |

```typescript
// Example TypeScript typings for visibility classes
type VisibilityClass = "visible" | "invisible" | "collapse"
```

This table outlines the support level of each class, indicating full browser compatibility for `visible` and `invisible`, while `collapse` is limited to web environments.

## List Style Position

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `list-inside`  | ✅ Full Support |
| `list-outside` | ✅ Full Support |

## List Style Type

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `list-none`    | ✅ Full Support |
| `list-disc`    | ✅ Full Support |
| `list-decimal` | ✅ Full Support |

## Built on Tailwind CSS

Nativewind is developed using the Tailwind CSS framework. Consequently, the fundamental principles of Tailwind CSS are applicable to Nativewind as well. It's advisable to review their documentation on:

- Utility-First Fundamentals
- Reusing Styles
- Adding Custom Styles

Understanding that CSS styles in Nativewind are generated through the Tailwind CLI is crucial, which means all features and compiler options of Tailwind CSS for web development are accessible.

This guide focuses on universally compatible features. However, platform-specific prefixes can be used to apply styles exclusive to web platforms.

### Supporting React Native

Nativewind functions similarly to traditional CSS by accepting all class names but only applying the supported styles. For instance, using `grid` will work in a web environment but not natively.

For more details on minor differences between Nativewind and Tailwind CSS, refer to the differences guide.

## Text Transform

### Usage

For detailed instructions, please consult the Tailwind CSS documentation.

### Compatibility

| Class         | Support         |
| ------------- | --------------- |
| `uppercase`   | ✅ Full Support |
| `lowercase`   | ✅ Full Support |
| `capitalize`  | ✅ Full Support |
| `normal-case` | 🌐 Web only     |

## Z-Index

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class    | Support         |
| -------- | --------------- |
| `z-{n}`  | ✅ Full Support |
| `z-[n]`  | ✅ Full Support |
| `z-auto` | 🌐 Web only     |

## Text Color

### Usage

For detailed information on usage, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `text-{n}`     | ✅ Full Support |
| `text-[n]`     | ✅ Full Support |
| `text-inherit` | 🌐 Web only     |
| `text-current` | 🌐 Web only     |

### textOpacity (Native Only)

Due to performance considerations, Nativewind renders with the `corePlugin` `textOpacity` feature disabled by default. This plugin enables dynamic changes in text opacity using the `--tw-text-opacity` variable. Instead, opacity is set as a static value within the `color` property.

To enable this feature, modify your `tailwind.config.js` file as follows:

```typescript
module.exports = {
  /* ... */
  corePlugin: {
    textOpacity: true,
  },
}
```

## Text Decoration

### Usage

For detailed information, please consult the Tailwind CSS documentation.

### Compatibility

| Class          | Support         |
| -------------- | --------------- |
| `underline`    | ✅ Full Support |
| `line-through` | ✅ Full Support |
| `no-underline` | ✅ Full Support |
| `overline`     | 🌐 Web only     |
