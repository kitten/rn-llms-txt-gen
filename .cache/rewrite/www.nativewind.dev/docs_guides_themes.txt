# Themes

Nativewind, leveraging Tailwind CLI, supports all theming options available in Tailwind CSS. For detailed information on each className and its possible theming values, refer to the Tailwind CSS documentation.

## Dynamic Themes

To transition from a static theme to a dynamic one using Nativewind, employ CSS Variables for colors. This method provides flexibility and adaptability, allowing themes to cater to user preferences effectively.

### tailwind.config.js

```typescript
module.exports = {
  theme: {
    colors: {
      // Define a custom color utilizing a CSS custom property
      primary: "rgb(var(--color-values) / <alpha-value>)",
    },
  },
  plugins: [
    // Set default values on the `:root` element
    ({ addBase }) =>
      addBase({
        ":root": {
          "--color-values": "255 0 0",   // Default red color
          "--color-rgb": "rgb(255 0 0)",
        },
      }),
  ],
};
```

### App.tsx

```typescript
import { vars } from 'nativewind';

const userTheme = vars({
  '--color-values': '0 255 0',   // Change to green color
  '--color-rgb': 'rgb(0 0 255)', // Change to blue color
});

export default function App() {
  return (
    <View>
      <Text className="text-primary">Access as a theme value</Text>
      <Text className="text-[--color-rgb]">Or the variable directly</Text>

      {/* Variables can be changed inline */}
      <View style={userTheme}>
        <Text className="text-primary">I am now green!</Text>
        <Text className="text-[--color-rgb]">I am now blue!</Text>
      </View>
    </View>
  );
}
```

## Switching Themes

Nativewind remains neutral regarding the implementation of theming. Below is an example supporting two themes with both light and dark modes.

### App.jsx

```typescript
import { vars, useColorScheme } from 'nativewind';

const themes = {
  brand: {
    light: vars({
      '--color-primary': 'black',
      '--color-secondary': 'white'
    }),
    dark: vars({
      '--color-primary': 'white',
      '--color-secondary': 'dark'
    })
  },
  christmas: {
    light: vars({
      '--color-primary': 'red',
      '--color-secondary': 'green'
    }),
    dark: vars({
      '--color-primary': 'green',
      '--color-secondary': 'red'
    })
  }
};

function Theme(props) {
  const { colorScheme } = useColorScheme();
  return (
    <View style={themes[props.name][colorScheme]}>
      {props.children}
    </View>
  );
}

export default function App() {
  return (
    <Theme name="brand">
      <View className="text-primary"> {/* rgba(0, 0, 0, 1) */}</View>
      <Theme name="christmas">
        <View className="text-primary"> {/* rgba(255, 0, 0, 1) */}</View>
      </Theme>
    </Theme>
  );
}
```

## Retrieving Theme Values

### Accessing Default Colors

To access default color values at runtime, import them directly from `tailwindcss`.

```typescript
import colors from "tailwindcss/colors";

export function MyActivityIndicator(props) {
  return <ActivityIndicator size="small" color={colors.blue.500} {...props} />;
}
```

### Access Theme Values

For custom theme values, extract them to a shared file with your code and `tailwind.config.js`. Refer to the Tailwind CSS documentation for more details.

#### colors.ts

```typescript
module.exports = {
  tahiti: {
    100: "#cffafe",
    200: "#a5f3fc",
    300: "#67e8f9",
    400: "#22d3ee",
    500: "#06b6d4",
    600: "#0891b2",
    700: "#0e7490",
    800: "#155e75",
    900: "#164e63",
  },
};
```

#### tailwind.config.js

```typescript
const colors = require("./colors");

module.exports = {
  theme: {
    extend: {
      colors,
    },
  },
};
```

#### MyActivityIndicator.js

```typescript
import colors from "./colors";

export function MyActivityIndicator(props) {
  return <ActivityIndicator color={colors.tahiti.500} {...props} />;
}
```

## Platform-Specific Theming

### platformSelect

`platformSelect` is equivalent to `Platform.select()`.

#### tailwind.config.js

```typescript
const { platformSelect } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      colors: {
        error: platformSelect({
          ios: "red",
          android: "blue",
          default: "green",
        }),
      },
    },
  },
};
```

### platformColor()

Equivalent to `PlatformColor`, typically used with `platformSelect`.

#### tailwind.config.js

```typescript
const { platformColor } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      colors: {
        platformRed: platformSelect({
          android: platformColor("systemRed"),
          web: "red",
        }),
      },
    },
  },
};
```

## Device-Specific Theming

### hairlineWidth()

Equivalent to `StyleSheet.hairlineWidth`.

#### tailwind.config.js

```typescript
const { hairlineWidth } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        hairline: hairlineWidth(),
      },
    },
  },
};
```

### pixelRatio()

Equivalent to `PixelRatio.get()`. If a number is provided, it returns `PixelRatio.get() * <value>`, otherwise the PixelRatio value.

#### tailwind.config.js

```typescript
const { pixelRatio } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      borderWidth: {
        number: pixelRatio(2),
      },
    },
  },
};
```

### pixelRatioSelect()

A helper function to use `PixelRatio.get()` in a conditional statement, similar to `Platform.select`.

#### tailwind.config.js

```typescript
const { pixelRatio, hairlineWidth } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      borderWidth: pixelRatioSelect({
        2: 1,
        default: hairlineWidth(),
      }),
    },
  },
};
```

### fontScale()

Equivalent to `PixelRatio.getFontScale()`. If a number is provided, it returns `PixelRatio.getFontScale() * <value>`, otherwise the `PixelRatio.getFontScale()` value.

#### tailwind.config.js

```typescript
const { fontScale } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScale(2),
      },
    },
  },
};
```

### fontScaleSelect()

A helper function to use `PixelRatio.getFontScale()` in a conditional statement, similar to `Platform.select`.

#### tailwind.config.js

```typescript
const { fontScaleSelect, hairlineWidth } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      fontSize: {
        custom: fontScaleSelect({
          2: 14,
          default: 16,
        }),
      },
    },
  },
};
```

### getPixelSizeForLayoutSize()

Equivalent to `PixelRatio.getPixelSizeForLayoutSize()`.

#### tailwind.config.js

```typescript
const { getPixelSizeForLayoutSize } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      size: {
        custom: getPixelSizeForLayoutSize(2),
      },
    },
  },
};
```

### roundToNearestPixel()

Equivalent to `PixelRatio.roundToNearestPixel()`.

#### tailwind.config.js

```typescript
const { roundToNearestPixel } = require("nativewind/theme");

module.exports = {
  theme: {
    extend: {
      size: {
        custom: roundToNearestPixel(8.4),
      },
    },
  },
};
```