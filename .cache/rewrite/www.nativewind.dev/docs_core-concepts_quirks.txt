# Quirks

Nativewind integrates CSS and React Native into a unified language framework. Despite this integration, there are notable differences between the two style engines, which we refer to as quirks.

## Explicit Styles

React Native can encounter issues when styles are applied conditionally. To mitigate these problems, it is advisable to declare all styles explicitly.

For instance, rather than applying text color solely for dark mode, specify both light and dark mode text colors. This approach is crucial for ensuring smooth transitions and animations.

## dp vs px

The default unit in React Native is density-independent pixels (dp), whereas the web uses pixels (px). Although these units differ, Nativewind treats them as equivalent. Moreover, Nativewind's compiler mandates a unit for most numeric values, which often results in styles using the `px` unit. While this generally functions well, you might need to employ platform-specific modifiers (`web:`, `native:`, `ios:`, `android:`) to make necessary adjustments per platform.

## Flex

Flexbox operates similarly in React Native as it does on the web, with a few exceptions. The default settings differ; for example, `flexDirection` defaults to `column` instead of `row`, `alignContent` defaults to `flex-start` rather than `stretch`, and `flexShrink` defaults to `0` instead of `1`. Additionally, the `flex` property only supports a single number.

We recommend explicitly setting the flex direction and using the className `flex-1` for consistent styling.

## Yoga 2 vs 3

In previous versions of React Native, margin, padding, or border properties applied to a row-reverse container would flip left/right (and start/end) edges. With the introduction of Yoga 3 in React Native 0.74, these property behaviors now align with those on the web.