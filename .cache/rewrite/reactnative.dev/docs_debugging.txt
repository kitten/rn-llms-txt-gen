# Debugging Basics

> Note: Debugging features, such as the Dev Menu, LogBox, and React Native DevTools are disabled in release (production) builds.

## Opening the Dev Menu

React Native provides an in-app developer menu that offers access to debugging features. You can open this menu by shaking your device or using keyboard shortcuts:

- **iOS Simulator**: `Ctrl` + `Cmd ⌘` + `Z` (or Device > Shake)
- **Android Emulators**: 
  - macOS: `Cmd ⌘` + `M`
  - Windows/Linux: `Ctrl` + `M`

Alternative for Android: Use the command `adb shell input keyevent 82`.

## Opening DevTools

React Native DevTools is an integrated debugger for React Native, allowing you to inspect and understand your JavaScript code execution. To open DevTools:

- Select "Open DevTools" in the Dev Menu.
- Press `j` from the CLI (`npx react-native start`).

Upon first launch, DevTools will display a welcome panel with an open console drawer for viewing logs and interacting with the JavaScript runtime. You can navigate to other panels like the React Components Inspector and Profiler from the top of the window.

React Native DevTools is built on a dedicated debugging architecture within React Native, using a customized version of the Chrome DevTools frontend. This integration provides familiar, browser-aligned debugging features designed for reliability.

> Note: React Native DevTools requires the Hermes engine and either Google Chrome or Microsoft Edge installed.

### Flipper and Alternative Debugging Tools

React Native DevTools replaces older tools like Flipper, Experimental Debugger, and the Hermes debugger (Chrome). For older versions of React Native, refer to version-specific documentation. 

For apps using JavaScriptCore instead of Hermes, Direct JSC Debugging is available (see Other Debugging Methods).

React Native DevTools focuses on debugging React app concerns and does not replace native tools. To inspect underlying platform layers, use Xcode or Android Studio's debugging tools.

Other useful links:
- [Why you don’t need Flipper in your React Native app … and how to get by without it](#)

## LogBox

LogBox is an in-app tool that displays warnings or errors logged by your app.

### Fatal Errors

When a fatal error, such as a JavaScript syntax error, occurs, LogBox opens at the error's location. In this state, LogBox cannot be dismissed because code execution is halted. It will automatically dismiss once the syntax error is fixed via Fast Refresh or manual reload.

### Console Errors and Warnings

Console errors and warnings appear as on-screen notifications with red or yellow badges:

- **Errors**: Display a notification count. Tap to view expanded details and paginate through logs.
- **Warnings**: Show a notification banner without details, prompting you to open React Native DevTools.

When React Native DevTools is active, all non-fatal errors are hidden from LogBox. It's recommended to use the Console panel within React Native DevTools as it provides comprehensive log information.

## Performance Monitor

On Android and iOS, an in-app performance overlay can be toggled during development by selecting **"Perf Monitor"** in the Dev Menu. Learn more about this feature [here](#).

> Info: The Performance Monitor is a guide for in-app use. For accurate performance measurements, investigate native tooling under Android Studio and Xcode.