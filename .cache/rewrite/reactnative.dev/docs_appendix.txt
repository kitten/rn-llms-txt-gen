# Appendix

## I. Terminology

- **Spec**: TypeScript or Flow code that defines the API for a Turbo Native Module or Fabric Native component. Utilized by **Codegen** to generate boilerplate code.

- **Native Modules**: Native libraries without a User Interface (UI) for users, such as persistent storage, notifications, and network events. These are accessible in your JavaScript application code as functions and objects.

- **Native Component**: Native platform views available to your application's JavaScript code through React Components.

- **Legacy Native Components**: Components operating on the old React Native architecture.

- **Legacy Native Modules**: Modules functioning on the old React Native architecture.

## II. Codegen Typings

The following table serves as a reference for supported types and their mappings across different platforms:

| Flow                                     | TypeScript                      | Flow Nullable Support      | TypeScript Nullable Support     | Android (Java)                       | iOS (ObjC)                                                     |
| ---------------------------------------- | ------------------------------- | -------------------------- | ------------------------------- | ------------------------------------ | -------------------------------------------------------------- |
| `string`                                 | `string`                        | `?string`                  | `string \| null`                | `string`                             | `NSString`                                                     |
| `boolean`                                | `boolean`                       | `?boolean`                 | `boolean \| null`               | `Boolean`                            | `NSNumber`                                                     |
| Object Literal `{ foo: string, ...}`     | `{ foo: string, ...} as const`  | `?{ foo: string, ...}`     | `?{ foo: string, ...} as const` | -                                    | -                                                              |
| Object \[1]                              | Object \[1]                     | `?Object`                  | `Object \| null`                | `ReadableMap`                        | `@` (untyped dictionary)                                       |
| `Array<T>`                               | `Array<T>`                      | `?Array<T>`                | `Array<T> \| null`              | `ReadableArray`                      | `NSArray` (or `RCTConvertVecToArray` when used inside objects) |
| `Function`                               | `Function`                      | `?Function`                | `Function \| null`              | -                                    | -                                                              |
| `Promise<T>`                             | `Promise<T>`                    | `?Promise<T>`              | `Promise<T> \| null`            | `com.facebook.react.bridge.Promise`  | `RCTPromiseResolve` and `RCTPromiseRejectBlock`                |
| Type Unions `'SUCCESS'\|'FAIL'`          | Type Unions `'SUCCESS'\|'FAIL'` | Only as callbacks          |                                 | -                                    | -                                                              |
| Callbacks `() =>`                        | Callbacks `() =>`               | Yes                        |                                 | `com.facebook.react.bridge.Callback` | `RCTResponseSenderBlock`                                       |
| `number`                                 | `number`                        | No                         |                                 | `double`                             | `NSNumber`                                                     |

### Notes:

**\[1]** It is strongly recommended to use Object literals instead of Objects.

For additional reference, consider the JavaScript specifications for core modules in React Native located within the `Libraries/` directory of the React Native repository.