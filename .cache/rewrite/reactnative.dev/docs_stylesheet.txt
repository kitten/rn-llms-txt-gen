# StyleSheet

A `StyleSheet` serves as an abstraction similar to CSS StyleSheets. It enhances code quality by:

- Moving styles away from the render function, making the code easier to understand.
- Naming styles adds meaning to low-level components in the render function and encourages reuse.
- In most IDEs, using `StyleSheet.create()` provides static type checking and suggestions for writing valid styles.

## Reference

### Methods

#### `compose()`

```typescript
static compose(style1: Object, style2: Object): Object | Object[];
```

Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array. This approach saves allocations and maintains reference equality for PureComponent checks.

#### `create()`

```typescript
static create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
```

An identity function for creating styles. The main practical benefit of using `StyleSheet.create()` is static type checking against native style properties.

#### `flatten()`

```typescript
static flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
```

Flattens an array of style objects into one aggregated style object.

#### `setStyleAttributePreprocessor()`

> **WARNING: EXPERIMENTAL.** Breaking changes may occur frequently and will not be reliably announced. The feature might be deleted; use at your own risk.

```typescript
static setStyleAttributePreprocessor(
  property: string,
  process: (propValue: any) => any,
);
```

Sets a function to pre-process a style property value. This is used internally for processing color and transform values. It should only be used if you are certain of its necessity after exploring other options.

### Properties

#### `absoluteFill`

A common pattern involves creating overlays with position absolute and zero positioning (`position: 'absolute', left: 0, right: 0, top: 0, bottom: 0`). The `absoluteFill` property is used for convenience to reduce duplication of these repeated styles. It can be customized in a StyleSheet.

#### `absoluteFillObject`

For cases where you need `absoluteFill` with slight modifications, `absoluteFillObject` allows customization within a StyleSheet.

#### `hairlineWidth`

Defined as the width of a thin line on the platform, this property is useful for setting the thickness of borders or divisions between elements. It ensures crisp lines by being a round number of pixels and attempts to match the standard width of a thin line on the underlying platform. However, its value may vary across different platforms and screen densities.

A line with `hairlineWidth` might not be visible if your simulator is downscaled.