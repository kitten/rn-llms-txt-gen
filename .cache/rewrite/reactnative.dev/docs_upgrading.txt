# Upgrading React Native Versions

Upgrading to newer versions of React Native provides access to additional APIs, views, developer tools, and other enhancements. Although the process requires some effort, we aim to make it as straightforward as possible.

## Expo Projects

To upgrade an Expo project to a new version of React Native, update the `react-native`, `react`, and `expo` package versions in your `package.json`. It is recommended by Expo to incrementally upgrade SDK versions one at a time. This approach helps identify any issues or breakages during the upgrade process. For detailed guidance, refer to the Upgrading Expo SDK Walkthrough.

## React Native Projects

React Native projects typically consist of an Android project, an iOS project, and a JavaScript project, making upgrades complex. The Upgrade Helper is a web tool designed to assist in upgrading apps by displaying all changes between two versions and providing comments on specific files for better understanding.

### Steps to Upgrade

#### 1. Select Versions

Begin by selecting the current version and the target version you wish to upgrade to. By default, the latest major versions are selected. After making your selection, click "Show me how to upgrade." Major updates may include a "useful content" section with helpful links.

#### 2. Upgrade Dependencies

The first file displayed is `package.json`. Update any dependencies listed there. For instance, if changes for `react-native` and `react` are shown, install them using the following commands:

- **Using npm:**

  ```shell
  # Replace {{VERSION}} and {{REACT_VERSION}} with the versions from the diff
  npm install react-native@{{VERSION}}
  npm install react@{{REACT_VERSION}}
  ```

- **Using Yarn:**

  ```shell
  # Replace {{VERSION}} and {{REACT_VERSION}} with the versions from the diff
  yarn add react-native@{{VERSION}}
  yarn add react@{{REACT_VERSION}}
  ```

#### 3. Upgrade Project Files

New releases may include updates to files generated by `npx react-native init`. These files are listed after `package.json` on the Upgrade Helper page. If no additional changes are needed, simply rebuild your project. Otherwise, manually apply any necessary changes.

### Troubleshooting

If you have made all required changes but your app still uses an old version, this issue is often related to caching. It's recommended to use react-native-clean-project to clear the cache and then rerun the process.