# Linking

Linking provides a unified interface for managing both incoming and outgoing app links. Each link (URL) is associated with a URL scheme, such as `https://` or `http://`, which serves as the scheme identifier.

## Built-in URL Schemes

Certain URL schemes are universally recognized across platforms:

| Scheme           | Description                                 | iOS | Android |
| ---------------- | ------------------------------------------- | --- | ------- |
| `mailto`         | Opens mail app, e.g., `mailto:support@expo.io` | ✅   | ✅       |
| `tel`            | Opens phone app, e.g., `tel:+123456789`      | ✅   | ✅       |
| `sms`            | Opens SMS app, e.g., `sms:+123456789`        | ✅   | ✅       |
| `https` / `http` | Opens web browser app, e.g., `https://expo.io` | ✅   | ✅       |

## Enabling Deep Links

### Projects with Native Code Only

This section applies to projects with native code. For managed Expo workflow users, refer to the Expo documentation for Linking.

#### Android

To enable deep links:

- Add intent filters in `AndroidManifest.xml`.
- Set `launchMode` of `MainActivity` to `singleTask`.

```xml
<activity
  android:name=".MainActivity"
  android:launchMode="singleTask">
```

> **Note:** For iOS, include the `LinkingIOS` folder in your header search paths. To handle incoming app links during execution, add the following to `*AppDelegate.m`:

##### Objective-C

```objc
// iOS 9.x or newer
#import <React/RCTLinkingManager.h>

- (BOOL)application:(UIApplication *)application
   openURL:(NSURL *)url
   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  return [RCTLinkingManager application:application openURL:url options:options];
}
```

##### Swift

```swift
func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey : Any] = [:]) -> Bool {
  return RCTLinkingManager.application(app, open: url, options: options)
}
```

For Universal Links:

##### Objective-C

```objc
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
  return [RCTLinkingManager application:application continueUserActivity:userActivity restorationHandler:restorationHandler];
}
```

##### Swift

```swift
func application(
  _ application: UIApplication,
  continue userActivity: NSUserActivity,
  restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
    return RCTLinkingManager.application(
      application,
      continue: userActivity,
      restorationHandler: restorationHandler
    )
}
```

## Handling Deep Links

There are two methods to handle URLs that open your app:

1. **Foreground App with Event**: If the app is already open, it foregrounds and fires a Linking 'url' event. Use `Linking.addEventListener('url', callback)` to handle these events.

2. **App Launch with URL**: If the app isn't open, it launches with the URL passed as `initialURL`. Handle this using `Linking.getInitialURL()`, which returns a Promise resolving to the URL if present.

## Reference

### Methods

#### `addEventListener()`

```typescript
static addEventListener(
  type: 'url',
  handler: (event: { url: string }) => void,
): EmitterSubscription;
```
Adds an event listener for Linking changes by listening to the `url` event type and providing a handler.

#### `canOpenURL()`

```typescript
static canOpenURL(url: string): Promise<boolean>;
```
Determines if an installed app can handle a given URL. Returns a Promise resolving to a boolean indicating whether the URL can be opened.

**Parameters:**

- **urlRequired**: The URL to check.

> For web URLs, ensure the protocol (`"http://"`, `"https://"`).

#### `getInitialURL()`

```typescript
static getInitialURL(): Promise<string | null>;
```
Returns the app launch URL if triggered by an app link; otherwise, returns `null`.

#### `openSettings()`

```typescript
static openSettings(): Promise<void>;
```
Opens the Settings app to display the app’s custom settings.

#### `openURL()`

```typescript
static openURL(url: string): Promise<any>;
```
Attempts to open a given URL with any installed apps. Returns a Promise resolving if successful or rejecting otherwise.

**Parameters:**

- **urlRequired**: The URL to open.

> Ensure the protocol is set for web URLs (`"http://"`, `"https://"`).

#### `sendIntent()` (Android)

```typescript
static sendIntent(
  action: string,
  extras?: Array<{ key: string; value: string | number | boolean }>,
): Promise<void>;
```
Launches an Android intent with optional extras.

**Parameters:**

- **actionRequired**: The action to perform.
- **extras**: Optional array of key-value pairs for additional data.