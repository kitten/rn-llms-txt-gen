# Rotation Gesture Handler

> **Warning:**  
> The old API will be deprecated in future versions of Gesture Handler. It is recommended to migrate to the gestures API. Refer to our upgrading guide for more details.

The `RotationGestureHandler` is a continuous gesture handler designed to recognize and track rotation gestures. Activation occurs when fingers are placed on the screen and move appropriately.

This handler provides callbacks for continuous tracking, offering insights into the gesture's characteristics such as the amount of rotation (in radians), the focal point or anchor of the rotation, and its instantaneous velocity.

On iOS, this functionality is implemented using `UIRotationGestureRecognizer`, while on Android it is developed from scratch.

## Properties

The properties specific to `RotationGestureHandler` do not extend those provided by the base handler class.

## Event Data

In addition to the event attributes available in the base handler class, `RotationGestureHandler` includes the following gesture-specific attributes:

- **rotation**: The amount of rotation, measured in radians, from the gesture's focal point (anchor).
- **velocity**: The instantaneous velocity of the gesture, expressed in points per second.
- **anchorX**: The X coordinate of the gesture's central focal point (anchor), measured in points.
- **anchorY**: The Y coordinate of the gesture's central focal point (anchor), measured in points.

## Example

Below is an example demonstrating how to use `RotationGestureHandler`:

```typescript
class RotableBox extends React.Component {
  _rotate = new Animated.Value(0);
  
  _rotateStr = this._rotate.interpolate({
    inputRange: [-100, 100],
    outputRange: ['-100rad', '100rad'],
  });

  _lastRotate = 0;

  _onRotateGestureEvent = Animated.event(
    [{ nativeEvent: { rotation: this._rotate } }],
    { useNativeDriver: USE_NATIVE_DRIVER }
  );

  _onRotateHandlerStateChange = (event) => {
    if (event.nativeEvent.oldState === State.ACTIVE) {
      this._lastRotate += event.nativeEvent.rotation;
      this._rotate.setOffset(this._lastRotate);
      this._rotate.setValue(0);
    }
  };

  render() {
    return (
      <RotationGestureHandler
        onGestureEvent={this._onRotateGestureEvent}
        onHandlerStateChange={this._onRotateHandlerStateChange}>
        <Animated.Image
          style={[
            styles.pinchableImage,
            {
              transform: [{ perspective: 200 }, { rotate: this._rotateStr }],
            },
          ]}
        />
      </RotationGestureHandler>
    );
  }
}
```

This example illustrates how to create a rotatable box using `RotationGestureHandler`, with continuous tracking of rotation gestures.