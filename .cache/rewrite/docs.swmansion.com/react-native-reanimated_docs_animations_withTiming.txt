# withTiming

`withTiming` enables you to create animations based on duration and easing functions.

## Reference

```typescript
import { withTiming } from 'react-native-reanimated';

function App() {
  sv.value = withTiming(0);
  // ...
}
```

### Arguments

#### `toValue`

The target value for the animation. Supported categories include:

- **Numbers**: Can be a number or a string representation of a number.
- **Suffixed Numbers**: Strings that combine numbers and units (e.g., `"5.5%"`, `"90deg"`, `"3bananas"`). Ensure no space between the number and suffix, with the suffix containing only basic English letters.
- **Colors**:
  - Hexadecimal integer: e.g., `0xff1234`
  - RGB: e.g., `"rgb(100, 50, 0)"`
  - RGBA: e.g., `"rgba(255, 105, 180, 0.5)"`
  - RGB Hexadecimal: e.g., `"#53575E"`
  - HSL: e.g., `"hsl(0, 50%, 50%)"`
  - Named colors: e.g., `"dodgerblue"`
- **Objects**: Objects with properties that will be animated individually.
- **Arrays**: Arrays of numbers where each value is animated separately.
- **Transformation Matrix**: An array of exactly 16 numerical values treated as a transformation matrix, decomposed into rotation, scale, and translation for animation.

Ensure `toValue` and the shared value being animated are of the same category (e.g., you cannot animate `width` from `100px` to `50%`).

#### `config` (Optional)

The configuration for timing animations. Available properties:

| Name         | Type          | Default                        | Description                                                                 |
|--------------|---------------|--------------------------------|-----------------------------------------------------------------------------|
| duration     | `number`      | 300                            | Length of the animation in milliseconds.                                    |
| easing       | `Easing`      | `Easing.inOut(Easing.quad)`    | An easing function defining the animation curve.                            |
| reduceMotion | `ReduceMotion`| `ReduceMotion.System`          | Determines how the animation responds to reduced motion settings on devices.|

##### `Easing`

The `easing` parameter allows fine-tuning of the animation over time, such as starting with fast acceleration and slowing down towards the end.

Reanimated provides various easing functions in the `Easing` module. You can visualize common easing functions at [easings.net](http://easings.net/).

Use built-in easings by passing them to the `withTiming` config:

```typescript
import { Easing } from 'react-native-reanimated';

withTiming(sv.value, {
  easing: Easing.bounce,
});
```

Available functions include:

- `back`: Animation where the object slightly moves back before moving forward.
- `bezier(x1: number, y1: number, x2: number, y2: number)`: Cubic bezier curve.
- `bounce`: Bouncing animation.
- `circle`: Circular function.
- `cubic`: Cubic function.
- `ease`: Simple inertial animation.
- `elastic(bounciness?: number)`: Spring interaction.
- `exp`: Exponential function.
- `linear`: Linear function.
- `poly(n: number)`: Higher power functions like quartic, quintic.
- `quad`: Quadratic function.
- `sin`: Sinusoidal function.

Helpers to modify easing functions:

- `in(easing: EasingFunction)`: Runs an easing function forwards.
- `inOut(easing: EasingFunction)`: Symmetrical easing function.
- `out(easing: EasingFunction)`: Runs an easing function backwards.

#### `callback` (Optional)

A function called upon animation completion. If the animation is canceled, it receives `false`; otherwise, it receives `true`.

### Returns

`withTiming` returns an animation object representing the current state of the animation. It can be assigned to a shared value or used in a style object from `useAnimatedStyle`.

## Example

## Remarks

- The callback passed as the third argument is automatically workletized and executed on the UI thread.

## Platform Compatibility

| Android | iOS | Web |
|---------|-----|-----|
| ✅      | ✅  | ✅  |