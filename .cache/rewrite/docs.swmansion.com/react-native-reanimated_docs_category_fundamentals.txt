# Animating Styles and Props

In the previous section, we explored creating simple animations, understanding shared values, and their application. In this part, we will delve into an alternative method for applying animation styles to components. We'll also examine the distinctions between animating styles versus props and how to manage them using `useAnimatedStyle` and `useAnimatedProps`.

## Animating Styles with `useAnimatedStyle`

The `useAnimatedStyle` hook allows you to define animated styles that can be applied directly to a component's style prop. This approach is particularly useful for smoothly transitioning between different visual states.

### Example

```typescript
import { useSharedValue, withSpring, useAnimatedStyle } from 'react-native-reanimated';

const AnimatedComponent = () => {
  const opacity = useSharedValue(0);

  // Define the animated styles
  const animatedStyles = useAnimatedStyle(() => ({
    opacity: withSpring(opacity.value),
  }));

  return <View style={[styles.view, animatedStyles]} />;
};
```

## Animating Props with `useAnimatedProps`

While `useAnimatedStyle` is great for animating styles, `useAnimatedProps` allows you to animate component props. This can be useful when the animation involves more than just visual changes.

### Example

```typescript
import { useSharedValue, withTiming, useAnimatedProps } from 'react-native-reanimated';

const AnimatedText = () => {
  const fontSize = useSharedValue(14);

  // Define animated props
  const animatedProps = useAnimatedProps(() => ({
    fontSize: withTiming(fontSize.value + 10),
  }));

  return <Animated.Text style={styles.text} {...animatedProps}>Hello World</Animated.Text>;
};
```

## Key Differences

- **`useAnimatedStyle`:** Best for animating styles directly. It provides a way to interpolate values and apply them as inline styles.
  
- **`useAnimatedProps`:** Ideal for animating props of components that do not support direct style interpolation.

By understanding these hooks, you can effectively manage animations in your React Native applications, enhancing both performance and user experience.