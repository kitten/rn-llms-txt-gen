# Shared Element Transitions

> **Caution:**  
> Shared Element Transition is an experimental feature and not recommended for production use yet. Feedback is welcomed to enhance its implementation.

Shared Element Transition enables a smooth transformation of a component from one screen to another.

## Reference

```typescript
import Animated from 'react-native-reanimated';

const Stack = createNativeStackNavigator();

function One({ navigation }) {
  return (
    <>
      <Animated.View sharedTransitionTag="sharedTag" />
      <Button title="Two" onPress={() => navigation.navigate('Two')} />
    </>
  );
}

function Two({ navigation }) {
  return (
    <>
      <Animated.View sharedTransitionTag="sharedTag" />
      <Button title="One" onPress={() => navigation.navigate('One')} />
    </>
  );
}

export default function SharedElementExample() {
  return (
    <NavigationContainer>
      <Stack.Navigator screenOptions={{ headerShown: true }}>
        <Stack.Screen name="One" component={One} />
        <Stack.Screen name="Two" component={Two} />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
```

## Overview

When Reanimated detects a component with a `sharedTransitionTag` being mounted or unmounted, it searches for the last registered view with the same tag. If two matching components are found, their styles are captured and both views are temporarily moved to a transition container during the animation. Afterward, they return to their original parent.

Without custom animations, properties like `width`, `height`, `originX`, `originY`, and `transformMatrix` animate by default over 500ms using `withTiming`.

## Implementation

To create a shared transition between components on different screens, assign the same `sharedTransitionTag`. Unique tags are required for multiple shared views on the same screen.

**Screen A**

```typescript
<View
  sharedTransitionTag="sharedTag"
  style={{ width: 150, height: 150, backgroundColor: 'green' }}
/>
```

**Screen B**

```typescript
<View
  sharedTransitionTag="sharedTag"
  style={{ width: 100, height: 100, backgroundColor: 'green' }}
/>
```

## Custom Animation

Custom animations can be created using `SharedTransition.custom` for regular animations or `SharedTransition.progressAnimation` for progress-based ones.

```typescript
import { SharedTransition } from 'react-native-reanimated';

const transition = SharedTransition.custom((values) => {
  'worklet';
  return {
    height: withSpring(values.targetHeight),
    width: withSpring(values.targetWidth),
  };
})
  .progressAnimation((values, progress) => {
    'worklet';
    const getValue = (
      progress: number,
      target: number,
      current: number
    ): number => {
      return progress * (target - current) + current;
    };
    return {
      width: getValue(progress, values.targetWidth, values.currentWidth),
      height: getValue(progress, values.targetHeight, values.currentHeight),
    };
  })
  .defaultTransitionType(SharedTransitionType.ANIMATION);
```

By setting `defaultTransitionType(SharedTransitionType.ANIMATION)`, the custom animation is used for screen transitions, while progress-based animations apply during swipe-back gestures (iOS only). Use `defaultTransitionType(SharedTransitionType.PROGRESS_ANIMATION)` to apply progress-based animations in both scenarios.

To use a custom animation, pass it as `sharedTransitionStyle` to components. Different animations can be assigned to different components sharing the same tag for directional transitions.

```typescript
<View
  sharedTransitionTag="reanimatedTransition"
  sharedTransitionStyle={transition}
  style={{ backgroundColor: 'blue', width: 200, height: 100 }}
/>
```

## Example

Your browser does not support the video tag.

Your browser does not support the video tag.

Expand the full code:

```typescript
<Pressable onPress={() => goToDetails('countryside')}>
  <Animated.View
    sharedTransitionTag={'countryside'}
    style={[
      styles.imageOne,
      { backgroundColor: gallery.countryside.color },
    ]}
  />
</Pressable>
<View style={styles.row}>
  <Pressable onPress={() => goToDetails('florence')}>
    <Animated.View
      sharedTransitionTag={'florence'}
      style={[
        { width: width / 2 - 35 },
        styles.imageTwo,
        { backgroundColor: gallery.florence.color },
      ]}
    />
  </Pressable>
  <Pressable onPress={() => goToDetails('dawn')}>
    <Animated.View
      sharedTransitionTag={'dawn'}
      style={[
        { width: width / 2 - 35 },
        styles.imageThree,
        { backgroundColor: gallery.dawn.color },
      ]}
    />
  </Pressable>
</View>
```

## Remarks

- Only the native stack is supported.
- Animatable properties include `width`, `height`, `originX`, `originY`, and `transformMatrix`.
- Layout for shared view children isn't computed during transitions.
- Currently supports only the old React Native architecture (Paper).
- Future support for the new React Native architecture (Fabric) is planned.

## Platform Compatibility

| Android | iOS | Web |
|---------|-----|-----|
| ✅      | ✅  | ❌  |