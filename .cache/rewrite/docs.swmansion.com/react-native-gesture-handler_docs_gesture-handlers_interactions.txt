# Cross Handler Interactions

**Warning:** The old API will be removed in future versions of Gesture Handler. Please migrate to the gestures API instead. Refer to our upgrading guide for more information.

Gesture handlers can "communicate" with each other to support complex gestures and control how they activate under certain scenarios. There are two methods described below for achieving this communication. In both cases, it is necessary to provide a reference of one handler as a property to the other. Gesture handlers rely on ref objects created using `React.createRef()` introduced in React 16.3.

## Simultaneous Recognition

By default, only one gesture handler can be in the `ACTIVE` state at any given time. When a gesture handler recognizes a gesture, it cancels all other handlers that are in the `BEGAN` state and prevents any new handlers from receiving a stream of touch events as long as it remains `ACTIVE`.

This behavior can be modified using the `simultaneousHandlers` property (available for all types of handlers). This property accepts a ref or an array of refs to other handlers. Handlers connected in this way will be allowed to remain in the `ACTIVE` state simultaneously.

### Use Cases

Simultaneous recognition is necessary when implementing a photo preview component that supports zooming (scaling), rotating, and panning while zoomed in. In such cases, you would use a `PinchGestureHandler`, `RotationGestureHandler`, and `PanGestureHandler` to recognize gestures at the same time.

### Example

See the "Scale, rotate & tilt" example from the GestureHandler Example App or view it directly on your phone by visiting our expo demo.

```typescript
class PinchableBox extends React.Component {
  // ...take a look at full implementation in an Example app
  render() {
    const imagePinch = React.createRef();
    const imageRotation = React.createRef();
    return (
      <RotationGestureHandler
        ref={imageRotation}
        simultaneousHandlers={imagePinch}
        onGestureEvent={this._onRotateGestureEvent}
        onHandlerStateChange={this._onRotateHandlerStateChange}>
        <Animated.View>
          <PinchGestureHandler
            ref={imagePinch}
            simultaneousHandlers={imageRotation}
            onGestureEvent={this._onPinchGestureEvent}
            onHandlerStateChange={this._onPinchHandlerStateChange}>
            <Animated.View style={styles.container} collapsable={false}>
              <Animated.Image
                style={[
                  styles.pinchableImage,
                  {
                    /* events-related transformations */
                  },
                ]}
              />
            </Animated.View>
          </PinchGestureHandler>
        </Animated.View>
      </RotationGestureHandler>
    );
  }
}
```

## Awaiting Other Handlers

### Use Cases

A good example where awaiting is necessary is when you want to have single and double tap handlers registered for one view (e.g., a button). In such cases, the single tap handler should await the double tap. Otherwise, if you try to perform a double tap, the single tap handler will fire after the first hit on the button, consequently cancelling the double tap handler.

### Example

See the "Multitap" example from GestureHandler Example App or view it directly on your phone by visiting our expo demo.

```typescript
const doubleTap = React.createRef();
const PressBox = () => (
  <TapGestureHandler
    onHandlerStateChange={({ nativeEvent }) =>
      nativeEvent.state === State.ACTIVE && Alert.alert('Single tap!')
    }
    waitFor={doubleTap}>
    <TapGestureHandler
      ref={doubleTap}
      onHandlerStateChange={({ nativeEvent }) =>
        nativeEvent.state === State.ACTIVE && Alert.alert("You're so fast")
      }
      numberOfTaps={2}>
      <View style={styles.box} />
    </TapGestureHandler>
  </TapGestureHandler>
);
```